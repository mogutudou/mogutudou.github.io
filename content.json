[{"title":"Oracle之SQL基础学习（五）","date":"2017-07-17T12:49:34.000Z","path":"2017/07/17/Oracle之SQL基础学习（五）/","text":"接之前的Oracle之SQL基础学习（四），今天学习查询相关的知识。查询应该是我们用的最频繁的一个操作了，所以一定要熟练掌握。 基本查询语句123select [distinct] column_name1,column_name2……|* from table_namewhere [conditions] distinct表示去除重复的值，*号表示查询所有字段。 运算符和表达式 算术运算符（+,-,*,/） 比较运算符（&gt;,&gt;=,&lt;,&lt;=,=,&lt;&gt;） 逻辑运算符（and,or,not） 在where的条件语句中，比较运算符的优先级大于逻辑运算符，逻辑运算符的优先级为 not &gt; and &gt; or ，也可以在条件语句中加上小括号来辅助理解。 在select语句中使用运算符，注意在查询语句中使用算术运算符对查询结果进行运算并不会影响表中原有的数据，如需影响表中的数据，可以使用之前学的update语句对表中数据进行更改。 带条件的查询带条件的查询就是在查询语句后面加上where语句，之前也有提到过，现在再大概的讲一下。where语句后面的条件基本上都是用比较运算符连接的表达式。 单一条件的查询 多条件的查询条件语句中使用多个比较运算符和多个逻辑运算符，可以达到一个复杂的查询条件，以查找到自己最终需要的目标内容。 模糊查询模糊查询使用的是like关键字，也可以将它规划到比较运算符中。 通配符的使用（_,%）一个_只能代表一个字符%可以代表0到多个任意字符 范围查询可以使用between …… and来进行范围查询，注意它是一个闭合区间，它包含两头的值。也可以使用in/not in来进行查询 未完待续……","tags":[{"name":"Oracle","slug":"Oracle","permalink":"http://mogutudou.com/tags/Oracle/"},{"name":"SQL","slug":"SQL","permalink":"http://mogutudou.com/tags/SQL/"}]},{"title":"Oracle之SQL基础学习（四）","date":"2017-07-03T13:14:37.000Z","path":"2017/07/03/Oracle之SQL基础学习（四）/","text":"接之前Oracle之SQL基础学习（三），今天学习约束相关的知识 约束的作用约束用来定义规则，确保数据完整性（精确性和可靠性）。 非空约束在创建表时设置非空约束123create table table_name( column_name datatype NOT NULL,……); 在修改表是添加非空约束12alter table table_namemodify column_name datatype NOT NULL; 在修改表时去除非空约束12alter table table_namemodify column_name datatype NULL; 主键约束作用：确保表当中每一行数据的唯一性 在创建表时设置主键约束相当于为主键设置了一个非空约束方法一：123create table table_name( column_name datatype PRIMARY KEY,……); 方法二：12CONSTRAINT constraint_name PRIMARY KEY(column_name1,……) 比如，我们创建一个用户信息表，把其中的id和password设置为主键约束123456create table userinfo_p（ id number(6,0), username varchar2(20), userpwd varchar2(20), constraint pk_id_username primary key(id,username)）; 在修改表时添加主键约束12add constraint constraint_nameprimary key(column_name1,……); 比如我们向之前创建的用户信息表userinfo中添加id为主键约束：12alter table userinfoadd constraint pk_id primary key(id); 更改约束的名称1rename constraint old_name to new_name 我们来试着更改刚刚userinfo表中约束的名称：12alter table userinforename constraint pk_id to new_pk_id; 删除主键约束这条语句跟之前的一样，也是需要放在alter table table_name后面的，这条语句适用于暂时禁用该约束，以后仍可能会重新启用该约束的情况。1disable/enable constraint constraint_name; 比如我们来禁用刚刚的new_pk_id这个约束。12alter table userinfodisable constraint new_pk_id; 如果我们想直接删除该约束可用如下drop语句,同样也是跟在alter table table_name后面1drop constraint constraint_name; 还有一种删除主键约束的方法：1drop primary key[cascade] 外键约束在创建表时设置外键约束123create table table1(column_name datatype REFERENCES table2(column_name),……); table2为主表，table1为从表。注意：1、设置外键约束时，主表的字段必须是主键2、主从表相应的字段必须是同一数据类型3、从表中外键字段的值必须来自主表中的相应字段的值，或者为null值 例如，我们先创建一个用户类型表为主表123create table typeinfo(type_id varchar2(10) primary key,type_name varchar2(20)); 现在创建一个从表1234create table userinfo(id varchar2(10) primary key,user_name varchar2(20),type_id_new varchar2(10) references typeinfo(type_id)); 上面是在列级创建的外键约束，下面我们也可以在表级进行创建外键约束我们会用到这样一个语句：1constraint constraint_name foreign key(column_name) references table_name(column_name)[on delete cascade] on delete cascade表示级联删除的意思，就是如果主表当中的一条数据被删除之后，从表中使用了这条数据的字段所在的行也会被一起删除掉，确保了主从表数据的完整性。例如，我们重新创建用户信息表，再通过用表级创建外键约束的方式来进行重新设置。12345create table userinfo_f(id varchar2(10) primary key,username varchar2(20),typeid_new varchar2(10),constraint fk_typeid_new foreign key(typeid_new) references typeinfo(type_id)); 上面并没有在后面添加级联删除on delete cascade 在修改表时添加外键约束这个跟之前在修改表时添加主键约束的用法类似，也是放在alter table table_name后面，语句如下：12add constraint constraint_name foreign key(column_name)references table_name(column_name)[on delete cascade] 未完待续……","tags":[{"name":"Oracle","slug":"Oracle","permalink":"http://mogutudou.com/tags/Oracle/"},{"name":"SQL","slug":"SQL","permalink":"http://mogutudou.com/tags/SQL/"}]},{"title":"又见周末","date":"2017-06-10T14:37:18.000Z","path":"2017/06/10/e5-8f-88-e8-a7-81-e5-91-a8-e6-9c-ab/","text":"五一长假回来到现在刚好一个月，才过了一个月就有点不知所措了。上班还好，新事物很多，要学的东西也很多，整体来看还能够处理过来，强度不算太大。因为是一个远程运维项目，每天的主要工作就是对应客户遇到的问题，分析原因，解决问题。我觉得最开始在运维项目也挺好，不用在自己什么都不知道，系统都不熟悉的情况下直接拉到项目地做实施。先看看别人做的，成熟的，好的系统是怎样的，有了一定的见识和经验累积之后再去实施，相信做出来东西会更有价值一些。 周末了，真不知道这段时间是怎么一个人过下来的，其实我不是一个耐得住寂寞的人，有空闲的时间也会想到处走走，找好朋友约个饭聊聊天什么的。但是这段时间下来，我竟然也变得很宅了，觉得出去是一件麻烦的事，交通也不方便，“进城”至少得坐一个小时的车，想想就好累。这边也没什么好朋友，自己一个人久了，确实有点太孤独了。甚至周末都变得让我又爱又恨，上班久了就想着放假，真正等到放了假又发现假期生活是如此死宅，太无趣了。我一直不甘心周末过的这么乏味，又不想坐很久的车走太远，所以每个周末我都会骑共享单车到附近逛逛。最近几个周末去了青浦公园家乐福、吾悦广场、朱家角景区，距离来说是越来越远了，十多公里对于骑行来说也是一个能达到锻炼身体目的的距离吧。 上海青浦的天气和空气都不错，公司边上有条河，园区里面也是绿荫环绕，环境还不错。晴朗的夜晚会看到无数的繁星，听到嘈杂的蛙叫声，好像回到了小时候和爸妈在农村夏日乘凉的场景，挺怀念的。 这个周末下了雨，也就没出去溜达了，明天计划去剪个头发然后回到公司把近期接到的一些票总结一下，像我这样周末无聊到主动跑去“加班”的也是没几个了吧。 附上一张老家的照片","tags":[{"name":"生活","slug":"生活","permalink":"http://mogutudou.com/tags/生活/"},{"name":"汉得","slug":"汉得","permalink":"http://mogutudou.com/tags/汉得/"}]},{"title":"Oracle之SQL基础学习（三）","date":"2017-06-06T13:00:34.000Z","path":"2017/06/06/oracle-e4-b9-8bsql-e5-9f-ba-e7-a1-80-e5-ad-a6-e4-b9-a0-ef-bc-88-e4-b8-89-ef-bc-89/","text":"接之前Oracle之SQL基础学习（二），之前学习了表方面的相关知识以及对表的一些基础操作语句，接下来学习操作表中的数据。 添加数据向表中添加数据主要用到了Insert语句123insert into table_name(column1,column2……)values(value1,value2……); 我们如果要向表中所有字段都添加值，那么第一个括号中的column名可以全部不写，但此时后面的values的值的个数和数据类型要与之前定义表的时候的列的个数和数据类型是一一对应的。之前我们创建了一个用户信息表，现在向表中所有字段都添加值：12insert into userinfovalues(1,&apos;xxx&apos;,&apos;123&apos;,&apos;xxx@qq.com&apos;,sysdate); 向指定字段添加值只需要在insert语句中把需要添加的column名字和对应的value写清楚即可。比如我们只向用户编号（id）、用户名、密码添加值就可以像下面这样写：12insert into userinfo (id,username,userpwd)values(2,&apos;yyy&apos;,&apos;456&apos;); 复制表中数据对于一个表中的数据，我们没必要用values语句一个一个的往里面输，我们也可以从其他表中通过复制到我们需要的表中。在创建表时复制在创建表的时候我们可以把其他表复制过来，也可以把表结构复制过来。123create table table_newas select column1,……|* from table_old 比如之前我们就创建了userinfo这个表，现在我们通过复制创建一个和userinfo一样的表，就叫做userinfo_new吧。123create table userinfo_newasselect * from userinfo; 在添加时复制123insert into table_new [(column1,column2……)]select column1,column2……|* from table_old; 注意我们新表中复制插入的数据类型要和旧表中的顺序和数据类型进行匹配才可以。 修改表中的数据修改表中数据会用到update语句，如下：123update table_nameset column1 = value1, ……[where conditions]; 例如我们可以更新用户名为‘xxx’的密码为‘123456’，使用如下语句：123update userinfoset userpwd = &apos;123456&apos;where username = &apos;xxx&apos;; 如果不加where条件的话，则是更新表中该列所有行数据。 删除表中的数据Oracle删除是针对某一行的数据，而不能删除某一列的数据。相关语句如下：12delete from table_name[where conditions]; 上面的语句中，如果不加where的条件，则是删除表中所有数据，和之前学习的truncate语句达到的效果是一样的，但truncate语句的速度更快。如果加上where的相关条件，则可以有针对性的删除某一条或几条数据。例如我们可以将用户名是’yyy’的用户数据进行删除，语句如下：12delete from userinfo where username = &apos;yyy&apos;;","tags":[{"name":"Oracle","slug":"Oracle","permalink":"http://mogutudou.com/tags/Oracle/"},{"name":"SQL","slug":"SQL","permalink":"http://mogutudou.com/tags/SQL/"}]},{"title":"Oracle之SQL基础学习（二）","date":"2017-06-03T13:47:22.000Z","path":"2017/06/03/oracle-e4-b9-8bsql-e5-9f-ba-e7-a1-80-e5-ad-a6-e4-b9-a0-ef-bc-88-e4-ba-8c-ef-bc-89/","text":"接之前Oracle之SQL基础学习（一），之前学习了表空间的一些基本概念以及查看、创建、修改、删除表空间等的一些操作和语句，接下来就开始学习表的相关知识。 表是什么？表存放在Oracle数据库的表空间里面，是存储数据最基本的存储单位，在Oracle中，表都是二维结构，就是说它是由行和列组成的。 表中的数据类型字符型： CHAR(n)、NCHAR(n)，这两种是固定长度为n的字符型。 VARCHAR2(n)、NVARCHAR2(n)，这两种是可变长度的字符型数据类型，相对节省空间。注意：NCHAR(n)、NVARCHAR2(n）这两种是支持Unicode格式进行存放的数据类型。 数值型： NUMBER(p,s)，p可以理解为有效数字，s可以理解为小数点后的位数，也可理解为一个范围。 FLOAT(n)，主要用于存储二进制数据。 日期型： DATE(一个范围，精确到秒） TIMESTAMP（精确到小数秒） 其他类型： BLOB CLOB 管理表创建表：1234create table table_name(column_name datatype,column_name2 datatpye2……); 比如我们可以创建一个用户信息表。我们先想一下表中应该有的字段以及它们的字段类型：编号（数值型）、用户名（字符型）、密码（字符型或数字型）、邮箱（字符型）、注册时间（日期型）等，所以可以写下如下代码：12345678create table userinfo(id number(6,0),username varchar2(20),password varchar2(20),email varchar2(60),regdate date); 如果要查看刚刚已创建好的表userinfo的表结构，就像之前查看数据字典一样的方法，写下代码desc userinfo即可。 修改表：修改表的结构，向表中添加字段，可以使用下面的语句：12alter table table_name add column_name datatype; 比如，我们可以向刚刚创建好的用户信息表userinfo中添加一个备注字段12alter table userinfoadd remarks varchar2(500); 更改字段的数据类型：12alter table table_name modify column_name datatype; 我们可以更改数据类型的长度，或者直接更换数据类型 删除字段12alter table table_name drop column column_name; 修改字段的名字（字段类型不变）12alter table table_namerename column column_name to new_column_name; 对表进行改名1rename table_name to new_table_name; 删除表1、 对表进行截断（删除表中的全部数据，表依旧存在）1truncate table table_name; 2、 对表进行删除（将表和表中数据全部一起进行删除）1drop table table_name;","tags":[{"name":"Oracle","slug":"Oracle","permalink":"http://mogutudou.com/tags/Oracle/"},{"name":"SQL","slug":"SQL","permalink":"http://mogutudou.com/tags/SQL/"}]},{"title":"Oracle之SQL基础学习（一）","date":"2017-05-29T15:02:45.000Z","path":"2017/05/29/oracle-e4-b9-8bsql-e5-9f-ba-e7-a1-80-e5-ad-a6-e4-b9-a0-ef-bc-88-e4-b8-80-ef-bc-89/","text":"最近在项目上接到了第一个票，虽然比较简单，但对于我来说仍然有点生疏，有许多值得总结的地方。 上了项目之后发现之前培训的内容还是很有用处，项目上用到的仍是当初培训的EBS，只是经过了二次开发，多了许多除标准界面以外的addon界面，系统换成了日文系统，本质上还是EBS那方面的东西。 尽管如此，我发现仅熟悉系统和相关操作还远远不够，其中SQL这一块之前培训就几乎没涉及，但这一块还很重要，如果能懂一些Oracle数据库方面的知识，将对以后的工作有很大的帮助。 公司有相关的学习资料，相对于无声的文字，我可能更倾向于有声音，能看到操作流程的视频，所以我选择跟着慕课网上的相关视频进行学习。下面就从最基础的开始吧，不求精通，但求尽可能的多学会一些知识吧。 表空间表空间是一个逻辑存储空间。 永久表空间: 永久存储的表/视图等 临时表空间: 数据库操作中中间执行的过程, 完了自行删除将不永久保存 UNDO表空间: 保存事务所修改的旧值,修改前的数据(利于撤销等方便回滚)个人理解：数据库就是一个电脑，表空间就是里面的C盘、D盘、E盘，表空间由一个或多个数据文件构成的，表空间里存放数据库的对象。 查看用户表空间两个数据字典： dba_tablespaces user_tablespaces我们可以输入desc user_tablespaces; 查看用户的表空间，或者通过select tablespace_name from user_tablespaces;查看tablespace_name这个表空间。查看系统默认表空间和临时表空间用如下语句1select default_spaces,tempory_spaces from dba_users where user_name = &apos;SYSTEM&apos;;` 更改system用户默认表空间的语句alter user system default tablespace xxx; 创建、修改、删除表空间创建永久表空间：1create tablespace tablespace_name datafile &apos;xx.dbf&apos; size xx; 例如可以通过如下语句创建一个test1_tablespace的永久表空间，数据文件为test1file.dbf，表空间大小为10M：12create tablespace test1_tablespace datafile&apos;test1file.dbf&apos; size 10m; 创建临时表空间只需要将在tablespaces前加上temporary，再将datafile改为tempfile即可，语句为：1create temporary tablespace tablespace_name tempfile &apos;xx.dbf&apos; size xx; 创建好表空间后，表空间存放在默认路径下，我们可以查看表空间的具体路径，这里同样涉及两个数据字典 * dba_data_files * dba_temp_files 1desc dba_data_files; 我们也可以查看我们创建的表空间的文件名和路径：1select filename from dba_data_files where tablespace_name = &apos;TEST1_TABLESPACE&apos;; 修改表空间修改表空间的状态，联机状态/脱机状态：12alert tablespace tablespace_name online/offline; 在联机状态下修改表空间的状态，只读/可读写：12alert tablespace tablespace_nameread only/read write; 修改表空间里的数据文件给表空间增加数据文件：12alter tablespace tablespace_name add datafiles &apos;xx.dbf&apos; size xx; 例如，我们可以给刚刚创建的表空间增加一个数据文件test2file.dbf12alert tablespace test1_tablespaceadd datafile test2file.dbf size 10m; 删除表空间的数据文件：12alert tablespace tablespace_namedrop datafiles &apos;xx.dbf&apos;； 删除表空间，如果要删除表空间中的数据文件一起删掉就在后面加上 including contents。12drop tablespace tablespace_name [including contents]","tags":[{"name":"Oracle","slug":"Oracle","permalink":"http://mogutudou.com/tags/Oracle/"},{"name":"SQL","slug":"SQL","permalink":"http://mogutudou.com/tags/SQL/"}]},{"title":"汉得培训相关问答","date":"2017-05-14T06:05:09.000Z","path":"2017/05/14/e6-b1-89-e5-be-97-e5-9f-b9-e8-ae-ad-e7-9b-b8-e5-85-b3-e9-97-ae-e7-ad-94/","text":"最近好多未来新同事在问一些关于培训相关事情，有些加了我好友但有时候没看到消息回复的比较晚，这里先道歉了。大家问的问题大都差不多，这里做个简单的总结吧。 写在前面： 1、问培训相关问题的基本上都是即将毕业走进社会的“准社会人”，对于你们，距离毕业工作还有两个月左右的时间，现在问什么工作嘛，抓紧时间玩才是真理，珍惜一下大学生活的最后时光吧，比如美美的去搞个毕业旅行不好吗。以后时间就不是你的了，哪还有那么充足的时间去做你想做的事情，玩你想玩的东西。来了之后就会发现所有现在问的就都不是问题了，该怎样就怎样，一切都是那么水到渠成。 2、我是Oracle 3月班业务顾问，来的时间也不多，只能把我两个多月的培训经历大概总结一下，而且主要侧重于Oracle这边，SAP和AMS以及技术方向我了解的相对较少，若真有什么要问的我也可以提供其他方向已经培训过的朋友的联系方式。以下内容仅供参考，有什么错误或者解释不到位的还请各位大佬留言指正。 相关问题： 1、培训地点。公司总部在上海市青浦区汇联路33号，地理位置比较偏僻，具体在哪儿请自己查找地图。周围厂区比较多，吃喝玩乐相关的配套较少，地铁暂未开通，没有一点繁华大都市的感觉，像是来了一个假上海。这样你就可以更加专注学习，沉迷学习，无法自拔了。 2、园区配套。园区环境还可以，有点像个大学的校区的样子，里面教室、食堂、宿舍、小超市一应俱全，还有足球场、篮球场、健身房、乒乓球台、图书馆（只提供场地，没有书），所有都是免费的，只要你有时间有兴趣，都可以去挥汗如雨或者当个安静的美男（女）子。 [gallery ids=”876,880,877,878,879,885,882,883,884”] 3、培训的住宿问题。由于汉得新招的员工越来越多，自身园区宿舍容量有限，所以接下来培训的朋友们应该会住到一个叫允惠人才公寓的地方，干净整洁，4人间，4张单人床，有少部分女生寝室是两人睡一张大床。洗衣机、热水器、独立卫生间、烧水壶、空调、WiFi（网速看人品）该有的都有，酒店式公寓，条件不差，但也并没有很高大上。床单被套都有，自己带一点生活用品就好，或者到这边来买也行。允惠距离园区2公里左右，每天早晚会有班车接送。时间大概是早上8 - 9点轮流接送，下午6点，晚上9点，其他也有班车去虹桥和其他地方，请自行查找公司班车时刻表。如果错过班车有共享单车可以骑，但如果晚上在公司加班很晚导致错过班车还是建议三四人一起打车回去。 [gallery columns=”4” ids=”892,891,890,886”] 4、体检和开学仪式。培训开始前一两天会进行体检和简单的开学典礼，体检就在园区体检，就是一些常规项，半天搞完，身体健康没什么大问题的就当走个流程就好。开学典礼穿正装，会有领导讲话，还有前几届的前辈分享经验，跟当初宣讲会内容差不多，半天搞完。 5、电脑发放。公司会给每个人发一台电脑，惠普，内存4g（技术可能是8g），i3处理器，500G，win 10 系统，后续各种软件安装和激活问题自行解决，若需要也可问我。 6、培训着装。原则上是穿正装，但我们这批由于汉得学院老师仁慈（感谢Jessie和晓旎姐），穿的比较随意。但某些场合必须穿正装，比如沙盘PPT汇报，期中期末考核汇报等。 7、部门划分。才进公司除少部分社招同事已分好部门和岗位外，其他应届毕业生都会被划分到“汉得学院”名下，培训后期再进行部门划分，一般是按照户籍所在地进行划分到华东、华北、华南、西部，也有极少同事会进行调整，原则上划分后便不作调整。 8、base地选择问题。培训后期会让选择base地，四个base地可选：北京、上海、广州、武汉，根据自己意向选择即可。注意：武汉base地只有湖北户口或者武汉的高校毕业生可选。 9、培训内容。Oracle这边主要是Oracle标准系统的各个模块培训，形式主要看各个模块培训老师的风格，有的讲的较少，我们主要看 ink网 上的视频，有的讲的较多，再写当天的操作手册，操作手册需格式规范，截图规范完整，期间遇到的各种问题可问老师或者助教，也可自行查阅 Oracle Support ，或者查阅 UG（user guide）。其他如SAP和技术方向的我也不清楚了。 10、培训完去向。培训完后该上项目的上项目，到时会有新的组长或者老顾问带，大家海角天涯，有缘再会。 PS：以上内容仅代表个人观点，有什么问题还可以在下面回复我，名字、邮件、网站地址均非必填。只要回复，我都能看到，谢谢。","tags":[{"name":"汉得","slug":"汉得","permalink":"http://mogutudou.com/tags/汉得/"}]},{"title":"想着阳光","date":"2017-05-08T14:00:57.000Z","path":"2017/05/08/e6-83-b3-e7-9d-80-e9-98-b3-e5-85-89/","text":"明明夏已立，依依烟雨淅。夏天来了，不管是重庆还是上海，气温并没有明显的升高，反而淅淅沥沥的下起了下雨，顿时有点春雨贵如油的味道了。从春天跨入夏天，总是那么不知足，好像春天过腻了，想赶紧感受一下夏日的清爽，可能没过几天又很怀念春天的和煦，总是这么矛盾和不满足。相对而言，最需要转换的是自己的心情吧，心情好，不管窗外什么景象，都能积极向上，想着阳光。 五一长假回来，又回到了正常上下班的生活。工作方面，由于我进了一个日本的项目，而日语我又是零基础，所以日语一直是我心中的痛点，但也急不得，乖乖的从头开始，从五十音图开始，一点一点的学吧，不求一两个月速成，至少能每天进步。每天晚上回来，我会看一些日语教学的视频，一般每个视频都将近一个小时，但是，每次看的时候都会越看越困，我觉得我晚上失眠的症状有解药了。 不管怎样，生活总是在继续，每天都是一个全新的开始，想着阳光，天天开心，天天进步。","tags":[{"name":"生活","slug":"生活","permalink":"http://mogutudou.com/tags/生活/"},{"name":"杂谈","slug":"杂谈","permalink":"http://mogutudou.com/tags/杂谈/"}]},{"title":"小聚的一天","date":"2017-04-08T16:58:18.000Z","path":"2017/04/09/e5-b0-8f-e8-81-9a-e7-9a-84-e4-b8-80-e5-a4-a9/","text":"又是一个周末，这周由于只上了4天班（ke），所以过的特别快。这周学习了BOM和WIP模块，关于学习方面，虽然有少数苦闷，但整个过程还是顺利和愉快的，能为学到新知识而感到高兴。 当我得知我们的小罗老师也快要离开我们去上项目的时候心里是万分不舍的，这一个月接触下来，实话实说，小罗老师对我们很好，跟我们每个人关系都不错，关注我们的学习，为我们努力解决各种问题，也经常陪我们加班到深夜。作为一个助教，能做到如此，也让我们都这么喜爱的也不容易吧，我们全班也都会舍不得他吧！ 我觉得小罗老师是个值得深交的一生的朋友。性格写在脸上，人品刻在眼里，衷心祝福他前程似锦，爱情美满吧。 我们这来自全国五湖四海的“准社会人”，能够在汉得相聚一堂也是缘分，实属不易。大家也很有可能就这一两个月的同窗情谊，今年五月过后还不知道会去哪里共建美好社会呢，所以好好珍惜现在的美好时光吧。","tags":[{"name":"生活","slug":"生活","permalink":"http://mogutudou.com/tags/生活/"},{"name":"杂谈","slug":"杂谈","permalink":"http://mogutudou.com/tags/杂谈/"}]},{"title":"加班的日子","date":"2017-03-30T13:22:40.000Z","path":"2017/03/30/e5-8a-a0-e7-8f-ad-e7-9a-84-e6-97-a5-e5-ad-90/","text":"发个牢骚。今天跟往常一样，正常加班。与其说是加班，不如说是上晚自习。因为我们现在并没有一点职场人该有的样子，反而是非常有学生的样子，而且是高三时代那种学生。每天上课，做作业。走动的地方只有教室、寝室、食堂、厕所。昨天还考试了，今天也出成绩了，没出意外，又没及格。好伤心呐！！！！！！！！ 算了，牢骚发完了，回去写作业了，我大概也许真的是一个高中生了吧。","tags":[{"name":"生活","slug":"生活","permalink":"http://mogutudou.com/tags/生活/"},{"name":"汉得","slug":"汉得","permalink":"http://mogutudou.com/tags/汉得/"}]},{"title":"汉得第二周","date":"2017-03-19T14:08:58.000Z","path":"2017/03/19/e6-b1-89-e5-be-97-e7-ac-ac-e4-ba-8c-e5-91-a8/","text":"汉得培训第二周，这周基本上才算是培训的开始，前三天先把上周的沙盘模拟的汇报ppt讲了，接着财务和业务班在大教室一起上了两天课，讲了总帐的一些基础知识，还把oracle EBS系统的相关配置给设置好了，最后两天分班后讲了库存模块。 我仿佛回到了高中的时代，每天教室、食堂、寝室三点一线，这样忙碌又充实的生活我是特别怀念的，现在竟还能体会这样的生活，虽然时间可能只有两三个月，但我已是非常满足了。 俗话说，五年读书客，学富几何多。真正能高效率的学到东西的也大多是学生时代，或者像学生时代那样的氛围，就比如现在这样。进入社会之后，时间就不是自己的了，人也更难沉下心静下心去学习了 到了上海这边，身边的人们也大多刚来，周末也会抽空去逛逛繁华大都市，而我反而没什么兴趣。城市无非都那样，大同小异，走过了好多城市，最后发现，一切都是虚幻，自己身边的才是最真实的世界。 现在我身边的也都是来自全国各地的朋友们，整体来说我还是比较相信汉得的招聘标准，招进来的不说跟我志同道合，至少还是不亦乐乎，大家素质都比较高，都相处的比较好。现在大家在一起学习，两三个月后，有的回去论文答辩毕业，更多的可能就是根据项目的不同就分派到不同的地方不同的项目上去了吧。海内存知己，天涯若比邻。突然想到了这句诗，这样看来，自己还算是比较幸福的。 回到课程，初步熟悉了EBS系统，对于总帐模块和库存模块有了更清晰的认识。对于用户相关的操作，例如创建责任，切换责任，设置、提交请求，清除高速缓存等都已掌握。接下来学习了如何创建法人主体，创建主要分类帐，启用币种，创建子分类帐等等，具体操作流程已写在我们的每日操作手册中。我还认识了什么是弹性域，什么是段，以及每个段的值集，以前觉得很实际的东西原来在EBS中都有很详细的专业词汇和流程与之对应，不得不佩服。 接下来就是库存模块，库存模块是EBS中一个很重要的功能模块，我们主要根据ink网上的教学视频进行学习，跟着视频中的老师进行系统操作，主要有物料相关的设置、物料管理、单位管理、库存会计期、事物处理录入等。一套做下来也把库存模块中大多数的操作都操作了一遍，第一遍有点生疏，记下操作手册后再上手就熟悉多了。 在学习过程中也并不是永远那么顺心如意，很多东西都是第一次接触，对系统不熟，对财会方面的知识也了解不多，导致学习起来比较吃力。有时候一个操作稍有不慎就会报错，有时候是漏点了什么选项，因为每个表单中每个checkbox都有它自己的含义，点错了可能当时不会发现，但是之后在其他相关操作时就很有可能有问题。有时候是操作顺序不正确，比如有次我没有设置账户别名，也还没添加到Account alias issue，就导致我在事物处理的时候不能选择来源，后求助于助教才得以解决。还有次是库存组织没切换导致无法进行组织间在途转移……这样的问题遇到了太多，遇到问题不是坏事，努力想办法解决了就好，现在犯错总比以后到了项目上犯错好，同时也感谢助教老师的悉心解答，对我的每个问题都不厌其烦的给我讲解。 我们的培训跟财务会计有较大联系，在闲暇之余还得看一些相关书籍，补充一些这方面的知识。","tags":[{"name":"汉得","slug":"汉得","permalink":"http://mogutudou.com/tags/汉得/"}]},{"title":"初进汉得","date":"2017-03-12T08:00:00.000Z","path":"2017/03/12/e5-88-9d-e8-bf-9b-e6-b1-89-e5-be-97/","text":"3月8日我和汉得签了劳动合同，正式成为了汉得的一员。前面有两三个月的培训期，以及两三个月的试用期，但能进汉得我还是比较满意的，希望能在汉得有个比较好的发展吧， 经过一个传统的“开学仪式”之后，我们便开始了汉得的培训时光。 这两三天我们都会玩一个“沙盘模拟”的游戏，它一定程度上模拟了一个生产制造企业的经营活动，从它最初根据市场调研预测订单需求，到生产部门根据预测数据做出生产计划，采购部门再根据制定采购计划，采购到货后交给生产部门领料投料，生产出成品后再交给市场部门销售给客户，从而获取利润。整个生产制造过程大抵如此，期间财务部门会贯穿始终，因为几乎每一项企业流程都需要财务记账，每个部门都会涉及很多单据，财务的单据就更多了。 在整个游戏过程中，虽然老师没有要求我们目标是经营的如何出色，也没要求我们要达到怎样厉害的利润，可能只是要求我们在这个模拟过程中，体验到公司经营的流程，在每个部门都轮岗，知道企业各个部门的岗位职责。但是我们还是也都很专心认真的去熟悉各项工作，各种单据，一心想着把自己亲手经营的公司搞得越来越好，在各组的排名中也暗自较劲。 而评价一个企业经营的好坏，在沙盘模拟的最终评分标准中，企业的所有者权益是最关键因素，若要想赢的比赛，最直接的方法就是增加所有者权益的账面价值。而在模拟过程中增加所有者权益的最直接的方法就是销售产品，因此我们最初的制定销售产品的战略方针时就非常重要，选择尽可能多的销售产品的战略。 由于我们小组对沙盘模拟都还不熟悉，在大家联网玩之前，我们小组先试着玩了一把单机，因为对业务和规则都不熟悉，以及不像欠钱的传统思想的影响，我们最开始没有贷长期贷款，仅靠公司最初100万启动资金经营，选择租赁厂房，建造半自动和全自动生产线，大致玩到了4月份，公司资金链出现紧张，不得不开始短期贷款，短期贷款虽然利息低，但还款期限仅为3个月，3个月时间里我们没法盈利还款，所以到了6月份又需要贷款去还上次的贷款，有点像滚雪球，越滚越大，所以我们玩到五六月的时候便玩不下去了，公司濒临破产。 所幸我们玩的是单机，虽然相对于其他小组，我们耽误了半天时间，但这半天时间是非常值得的，因为我们已经从新手小白变成了大致熟悉规则和业务流程的“老手”，为接下来我们联网开始正式经营打好了坚实的基础。 期间整个经营过程就不再赘述了，网上已有好多沙盘模拟的心得体会，写的也都在情在理。大致情况就是我们的主打产品为电脑，厂房为租赁的，生产线为3条半自动，3条全自动。最开始我们贷款了200万，保证了我们后续经营的资金充裕，还有靠我们小组市场部门的同事对市场精准的分析，对订单的精准预测，通过准确的广告投放，我们可以算是达到了对所有市场的电脑需求的饱和，而且这样精准的计算还让我们几乎实现了零库存，减轻了仓管压力，减轻了库存对资金的占用，达到了资金的最大化利用。虽然我们没有最后排名第一，因为我们没有开发手机和手机市场，但是从资金运作和市场分析这一点来看，我认为我们小组做的是最好的。 ERP沙盘模拟与实际企业经营相比需要做出的决策少很多，也简单很多，同时一些规则也跟现实情况有很大差别，但玩了两三天下来我们也很疲惫，可以说累在其中也乐在其中，深刻的感受到经营一家企业并不是像想象中的那么容易。 非常感谢汉得给我们一个这样的锻炼机会，培养了我们的综合素质。而且如何制定战略，如何进行全面预算，如何应对意外情况这些在整个模拟中都有所体现，值得我们再细细思考和总结，为将这些方法运用到实践中做准备。","tags":[{"name":"杂谈","slug":"杂谈","permalink":"http://mogutudou.com/tags/杂谈/"},{"name":"汉得","slug":"汉得","permalink":"http://mogutudou.com/tags/汉得/"}]},{"title":"百度前端学院又开始了","date":"2017-03-06T10:38:28.000Z","path":"2017/03/06/e7-99-be-e5-ba-a6-e5-89-8d-e7-ab-af-e5-ad-a6-e9-99-a2-e5-8f-88-e5-bc-80-e5-a7-8b-e4-ba-86/","text":"新的一年，百度前端技术学院又重新开始了，刚去报了名，再点进去看了一下今年的任务，今年的任务跟去年没什么很大的区别，甚至好多任务都没变化，但是任务没变化并不是就是说没任何价值，里面所包含的知识点很多，对我来说还有很大的学习进步空间。都说旧壶装新酒，我看不用装新酒，就装旧酒也够我喝一壶的了。而且好多东西我都忘了，我觉得就算我从任务一开始，把任务都做一遍，只要是认真做了的，都会很有进步。 关于我做的前端的一些任务放在了我GitHub的badutask这个仓库下面，有兴趣的可以看一下，写的不好还请多多指教。","tags":[{"name":"百度前端","slug":"百度前端","permalink":"http://mogutudou.com/tags/百度前端/"}]},{"title":"很二的日子","date":"2017-02-22T15:55:00.000Z","path":"2017/02/22/e5-be-88-e4-ba-8c-e7-9a-84-e6-97-a5-e5-ad-90/","text":"今天是2月22号，好像2已经成为了“傻、笨、呆”的代名词了，虽然我也经常把它作为这些意思调侃过朋友，但我也觉得2有一种憨厚老实的这层意思在里面,所以我觉得它也并不是一个彻底的贬义词。 新的一年了貌似真的不一样了，今年总感觉有什么在暗示我，当我做了好的事心里会异常高兴，做起事来也特别顺心。当我做了不好的事晚上会有闪电，白天会阴雨绵绵，好像在警示我一样。还有当我心里想什么的时候，不管好的坏的，都很有可能会实现。中国有句古话叫“怕什么就来什么”，还有好像那个“墨菲定律”是不是也是说这个的？ 今天从重庆回到了綦江家里面，一回来发现飘窗花瓶里插满玫瑰花，是不是爸妈趁我不在的时候去过情人节了，他们关系也好像真的好一些了，我心里也很高兴。我距离去上海培训还有不到半个月了，可能以后会很少回家了，能多陪陪父母就多陪陪吧。 去年是个不好的一年，好多事都不是很顺心，过的有点压抑。今年一开始运气势头不错，我肯定会转运的，哈哈哈哈。虽然我不是很相信运气或者命运这东西，我更相信只有通过自身的努力才能改变自己的命运，但是我也拜佛，脖子上也挂着菩萨玉佩，就当是一种提醒和心里的自我安慰吧。","tags":[{"name":"生活","slug":"生活","permalink":"http://mogutudou.com/tags/生活/"},{"name":"杂谈","slug":"杂谈","permalink":"http://mogutudou.com/tags/杂谈/"}]},{"title":"陌生人的生日聚会","date":"2017-01-16T09:05:47.000Z","path":"2017/01/16/e9-99-8c-e7-94-9f-e4-ba-ba-e7-9a-84-e7-94-9f-e6-97-a5-e8-81-9a-e4-bc-9a/","text":"昨天，张xx从工地回来了，整个研二加研三有一半以上的时间都在工地度过，看来研究生的生活也并不是那么闲适。在参与导师项目同时自己也学习，在这个过程中也成为了导师的挣钱工具，现在的高校研究生也很多都这样吧？也是有点悲哀，不过这就是现实。 相比于这个，他和陈xx的恋爱进程是我更为吃惊的，速度太快了，到现在也才两三个月吧，今年估计要去见家长了。我也只是个路人甲，有点惊讶而已，只要他们都好，祝他们幸福，哈哈哈。 昨天陈xx的一个朋友过生日，除了叫张xx之外还硬要把我也一起叫去，我也是个好动之人，也没怎么推脱，就去了。一起聚餐的有7个人，还好大部分我都见过，其中有两对情侣，我略显尴尬。期间碰到小莉（7个之一）去换鸡年纪念币，我正好也是属鸡的，就去她那儿跟她换了两个，哈哈。整个聚餐过程就是吃饭，聊天，最后去唱歌。当然，我只是来蹭饭的，他们秀恩爱，我就假装没看到了。一起玩了下午加晚上5个小时左右，10点过回去的。 我现在发现聚餐真没什么好玩的，无非就是吃饭唱歌，因为人一多就想要打家都参与的话确实就没什么好玩的了，从深圳回来那么久，也聚过不少餐了，差不多都是这样，最多加个网吧。以前可能还会玩一点桌游，现在也不玩了。 我觉得过生日，叫上爱人或者男女朋友或者一两个玩的很好的，大家都很熟的朋友，一起吃个饭，聊聊天，然后去大家都感兴趣的，网吧、图书馆、咖啡厅，甚至滨江路和逛公园都可以，大家愉快高兴就行了。人不要太多，最多四个人，再不济打桌麻将也行，一起玩大家都喜欢的就好了。 生日这东西，我并不是很感冒。我以前还经常忘记自己的生日，有时候已经过了都不知道，过的挺莫名其妙的。 附上一张纪念币和一张昨晚唱歌时的照片","tags":[{"name":"生活","slug":"生活","permalink":"http://mogutudou.com/tags/生活/"},{"name":"杂谈","slug":"杂谈","permalink":"http://mogutudou.com/tags/杂谈/"}]},{"title":"怀念晴空万里","date":"2017-01-15T04:05:15.000Z","path":"2017/01/15/e6-80-80-e5-bf-b5-e6-99-b4-e7-a9-ba-e4-b8-87-e9-87-8c/","text":"重庆的天气啊，什么时候也雾霾重度污染了，记得小时候的夏天还可以躺在凉床上仰望星空繁星满天，一闪一闪，时不时飞过几架飞机，专注的眼神望的仿佛是另一个世界。现在重庆的雾霾虽不及北京那么厚重，但也给我们增添了不少灰暗，街上的行人也有不少戴口罩的，让人感到好伤感，好冷漠，重庆人民的热情也会被削减不少吧。 以前重庆也经常白茫茫一片，风一吹就散了，犹如仙境一般，雾都因此闻名。现在依旧是那片白色，但仙境已不在了，风一吹不会散，而是飘到了另一个地方，现在已不是雾，替而代之的是霾，那个让人无比讨厌的霾，那个无形中摧残着我们身心的霾，那个一眼望不穿的霾。以前我也去过北京，那时是去玩，当时北京还是蓝天白云，可能也是我运气好吧 我怀念以前的晴空万里，怀念以前的繁星满天，怀念以前的山青水绿。附上几张以前去旅游去玩自己拍的图。","tags":[{"name":"生活","slug":"生活","permalink":"http://mogutudou.com/tags/生活/"},{"name":"杂谈","slug":"杂谈","permalink":"http://mogutudou.com/tags/杂谈/"}]},{"title":"git学习","date":"2016-12-05T08:56:18.000Z","path":"2016/12/05/git-e5-ad-a6-e4-b9-a0/","text":"git学习git对我来说还是很陌生，就以前跟着练习了一些命令，建立了一些git仓库，也上传了一些文件到GitHub远程仓库，git要想熟练甚至精通简直太难，现在来说我只想重新掌握一些日常简单的命令，多练习达到熟练的程度就可以了。今天再重新翻出来，算是复习，也算是重新学习吧。 在看git之前我觉得很有必要了解一些终端的命令，最常见的几个大概是这几个： pwd显示当前目录的路径名* ls显示当前目录的内容，如果需要显示隐藏文件则加参数a，如ls -a cd改变当前目录，后面跟目录名称，另外如果后面不加参数则是返回根目录， cd ..是返回上一级目录 mkdir建立新目录，后面跟新建的目录名字，如mkdir ruirui cat显示或连接一个文件，后面跟文件名字，如cat liurui.html rm删除一个文件或目录，后面跟文件名字，如rm liurui.html mv移动或者重命名一个文件或目录，后面跟两个文件名字，如mv liuliu.html ruirui.html 创建版本库现在再来了解git，我们可以先创建一个新目录learngit，通过git init命令把这个目录变成Git可以管理的仓库 $ mkdir learngit $ cd learngit $ pwd /Users/michael/learngit $ git init Initialized empty Git repository in /Users/michael/learngit/.git/ `&lt;/pre&gt; #### 提交文件到版本库 我们再到这个learngit文件夹中创建一个文件，叫做readme.txt，里面随便写点什么，再用命令git add告诉Git，把文件添加到仓库，最后用命令git commit告诉Git，把文件提交到仓库：12345$ git add readme.txt$ git commit -m &quot;wrote a readme file&quot;[master (root-commit) cb926e7] wrote a readme file1 file changed, 2 insertions(+)create mode 100644 readme.txt 解释一下git commit命令，-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。你也可以多次用git add命令来添加多个文件，最后再用git commit一次性提交到仓库。 git status可以查看仓库当前的状态，如果你对仓库中文件进行了修改，通过这个命令就可以看到哪个文件被修改了，如果想看具体修改了哪些内容可通过git diff这个命令查看。如我对readme.txt进行了修改，就可以通过git diff readme.txt看到哪些地方被改动过了。 版本回退如果我们不断对文件进行修改，然后不断通过git commit提交修改到版本库里，有时候我们修改错了或者甚至误删了文件，我们都可以从某一次commit进行恢复。我们可以通过git log命令查看历史提交记录。 git log命令显示从最近到最远的提交日志，如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数即git log --pretty=oneline命令。 我们会看到一大串类似3628164…882e1e0的是commit id（版本号），每一次提交都会生成一个独有的id，只要有这个id我们可以回到任何一个之前提交的版本。 我们可以使用git reset命令回到以前的版本，但是Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交3628164…882e1e0（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。12$ git reset --hard HEAD^HEAD is now at ea34578 add distributed 我们还可以用git log命令看看现在版本库的状态，也可以用git reflog用来记录你的每一次命令：12345$ git reflogea34578 HEAD@&#123;0&#125;: reset: moving to HEAD^3628164 HEAD@&#123;1&#125;: commit: append GPLea34578 HEAD@&#123;2&#125;: commit: add distributedcb926e7 HEAD@&#123;3&#125;: commit (initial): wrote a readme file 这样我们就可以用git reset加版本id来恢复到之前的版本了，注意加了一个hard参数：12$ git reset --hard 3628164HEAD is now at 3628164 append GPL 工作区和暂存区git版本库有工作区和暂存区，暂存区作为中间的一个过渡区，可以用git add将工作区的文件添加到暂存区，再用git commit提交到版本库，这个概念比较简单。 我们也可以用git checkout -- file可以丢弃工作区的修改。1$ git checkout -- readme.txt 命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况： 一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态； 一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。 总之，就是让这个文件回到最近一次git commit或git add时的状态。 添加到远程库每次我们在本地更新版本库后可以通过使用命令git push origin master推送到自己的GitHub远程仓库，也可以用git clone将远程的库克隆到本地。 分支管理我们可以用git checkout -b dev命令创建并切换到dev分支：12$ git checkout -b devSwitched to a new branch &apos;dev&apos; git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：123$ git branch dev$ git checkout devSwitched to branch &apos;dev&apos; 可以用git branch查看当前分支123$ git branch* dev master git branch命令会列出所有分支，当前分支前面会标一个*号。 我们在新的分支dev上对文件进行修改，切换回master分支后修改内容就不见了，我们需要将分支合并到主分支上，用git merge可以完成：12345$ git merge devUpdating d17efd8..fec145aFast-forwardreadme.txt | 1 +1 file changed, 1 insertion(+) 注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。 当然，也不是每次合并都能Fast-forward，我们后面会讲其他方式的合并。 合并完成后，就可以放心地删除dev分支了，这里使用git branch -d命令：12$ git branch -d devDeleted branch dev (was fec145a). 当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。用git log --graph命令可以看到分支合并图。","tags":[{"name":"git","slug":"git","permalink":"http://mogutudou.com/tags/git/"}]},{"title":"重新学习之旅","date":"2016-12-03T03:28:48.000Z","path":"2016/12/03/e9-87-8d-e6-96-b0-e5-ad-a6-e4-b9-a0-e4-b9-8b-e6-97-85/","text":"上次说到好多东西都忘了，今天重新开始学习吧，学习的路上我不会停滞不前。 今天把最基础的html翻出来，总结了一个html模板，以后再写也方便多了。1234567891011121314151617181920212223242526272829&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh-cmn-Hans&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;网站标题&lt;/title&gt; &lt;meta name=&quot;description&quot; content=&quot;不超过150个字符&quot;&gt; &lt;!-- 使用最新的IE和chrome --&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;&gt; &lt;!-- 禁止手机上缩放 --&gt; &lt;meta name =&quot;viewport&quot; content =&quot;width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no&quot;&gt; &lt;!-- 禁止百度转码 --&gt; &lt;meta http-equiv=&quot;Cache-Control&quot; content=&quot;no-siteapp&quot;&gt; &lt;!-- External CSS --&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;css/normalize.css&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;css/main.css&quot;&gt; &lt;!-- In-document CSS --&gt; &lt;style&gt; /* ... */ &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- JavaScript --&gt; &lt;script src=&quot;code-guide.js&quot;&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 还有html规范确实很重要，我觉得这篇文章写的特别好，有时间的朋友可以看一下编码规范重新开始学习，每天都进步一点点。","tags":[{"name":"HTML","slug":"HTML","permalink":"http://mogutudou.com/tags/HTML/"}]},{"title":"十二月了","date":"2016-12-01T06:05:12.000Z","path":"2016/12/01/e5-8d-81-e4-ba-8c-e6-9c-88-e4-ba-86/","text":"时间过的真的很快，其实说实话上个月是怎么过的自己都没搞清楚，莫名其妙的就过去了，一想到今年又只剩30天了，这一年是怎么过的也没搞清楚就又快结束了，我好担心以后老了回头发现还没搞清楚这辈子是怎么过的就又快结束了。有的人其实25岁就死了，只是等到了80岁再埋。这话不知道谁说的，感觉说的挺有道理。 今天翻起了之前学过的一些东西，HTML、CSS，我还没看到JS就发现前面的那些以前觉得很简单的东西，现在都已经有点模糊了。HTML只记得一些标签和语义化，有些比较偏的标签都忘了。CSS只记得一些常用的属性，其他很多冷门点的属性完全没印象了，稍微有点技巧性的东西比如排版，文档流神马的都有点模糊不清了，更别说那些更高级的CSS3中动画和画板那些东西，有的只是一些大概的印象，只记得好像是有这个东西，到底是什么又说不清楚。真的是老了吗？记性太差了，我还只是两三个月没碰了而已。上个月没有写过一篇相关的博客，自己还真是懒惰啊！ 网上说自己知识储备的巅峰时期是高考那段时间，那时候上知天文下晓地理，物理化学那些都不在话下，现在看来，几乎全还给老师了。我还真是一个懂礼貌有借有还的好人哈？ 今年的最后一个月了，并不想过的这么莫名其妙，或者说，自己的人生还有好几十年还不想让自己现在就死了。","tags":[{"name":"生活","slug":"生活","permalink":"http://mogutudou.com/tags/生活/"},{"name":"杂谈","slug":"杂谈","permalink":"http://mogutudou.com/tags/杂谈/"}]},{"title":"祝君安好","date":"2016-11-21T11:44:30.000Z","path":"2016/11/21/e7-a5-9d-e5-90-9b-e5-ae-89-e5-a5-bd/","text":"如果再见不能红着眼，是否还能红着脸。再见，或许再也不见。我希望你三十岁没嫁，我也不希望你三十岁没嫁。故事总有结局，天涯各地，唯望君安。","tags":[{"name":"杂谈","slug":"杂谈","permalink":"http://mogutudou.com/tags/杂谈/"}]},{"title":"LeetCode题目——ugly number","date":"2016-10-31T15:16:02.000Z","path":"2016/10/31/leetcode-e9-a2-98-e7-9b-ae-ugly-number/","text":"写一个函数判断一个数是不是“丑陋的数字”，丑陋的数字是约数只有2，3，5的数字，比如6，8是丑陋的数字，14就不是，因为它还有约数7。用 javascript 写如下： var isUgly = function(num) { if(num &amp;lt;= 0) return false; if(num === 1 || num === 2 || num === 3 || num===5) return true; if(num%2 === 0){ return isUgly(num/2); }else if(num%3 === 0){ return isUgly(num/3); }else if(num%5 === 0){ return isUgly(num/5); }else return false; };","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://mogutudou.com/tags/JavaScript/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://mogutudou.com/tags/LeetCode/"}]},{"title":"三行诗","date":"2016-10-29T13:38:01.000Z","path":"2016/10/29/e4-b8-89-e8-a1-8c-e8-af-97/","text":"最近重庆交通大学在搞一个三行诗的活动，之前网上也见好多人写过，还挺火。这次也想玩玩，就随便写了一些，有的被朋友拿去投稿了（因为我不是交大的，所以不能参加），其实写的很烂，不过好歹是原创，就贴在下面了。 一共写了5篇： 大学的铅华已过去 交大的传承却永存我们内心 让这个世界绿树常有，鸟语花香 &nbsp; 云影掠过 常常 我还是只是一只孤燕！！ &nbsp; 踏上事业之舟，划动奉献之桨 渡向生命的最远方 再见，交大！ &nbsp; 大学四年，时光荏苒 也许就在这时候 有人在努力，有人在睡觉，当然也有人在刷怪 &nbsp; 总是在不知不觉之中才发现家中的爸妈，头上多了些许白发 多想时间可以放慢脚步，或许我还可以有机会 闲坐在紫藤萝下，听村里的老爷爷讲完他过去的故事 大家随便看看，如有引用还请注明出处。","tags":[]},{"title":"用canvas画布画一面五星红旗","date":"2016-10-25T04:00:05.000Z","path":"2016/10/25/e7-94-a8canvas-e7-94-bb-e5-b8-83-e7-94-bb-e4-b8-80-e9-9d-a2-e4-ba-94-e6-98-9f-e7-ba-a2-e6-97-97/","text":"最近在看canvas画布，其中有一些画直线和图形的方法，就正好试一下用画布来画一个五星红旗吧。在html代码这一块就只需要写一个canvas标签再把需要的js代码文件引入即可，因为这很简单，js这边也不需要写太多，就当是学习过后的练习好了。其中html代码如下：12345678910111213141516171819&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;star&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;canvas id=&quot;canvas&quot;&gt; 你的浏览器版本太低不支持canvas，请更新最新版浏览器。 &lt;/canvas&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;star.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; js这边主要是一个画五角星的函数，分析一下五角星的外面五个顶点和里面五个顶点分别都在一个圆上，分析角度过后，可以写这样如下这样一个函数，函数中已经把五角星的用黄色填充好了。1234567891011function drawStar(cxt,r,R,x,y,rot)&#123; cxt.beginPath(); for (var i = 0; i &amp;lt; 5; i++) &#123; cxt.lineTo(Math.cos((18 + i*72 - rot)/180*Math.PI)*R+x , -Math.sin((18 + i*72 - rot)/180*Math.PI)*R+y) cxt.lineTo(Math.cos((54 + i*72 - rot)/180*Math.PI)*r+x , -Math.sin((54 + i*72 - rot)/180*Math.PI)*r+y) &#125; cxt.fillStyle = &quot;#ff0&quot;; cxt.closePath(); cxt.fill(); // cxt.stroke();&#125; 函数内的几个参数分别表示canvas的2d绘图环境context，内圆半径，外圆半径，五角星或者圆心的x坐标，y坐标，五角星的旋转角度。 所以整个js代码部分可以写成这样：12345678910111213141516171819202122232425262728var canvas = document.getElementById(&quot;canvas&quot;);var context = canvas.getContext(&quot;2d&quot;);canvas.width = 800;canvas.height = 600;function drawStar(cxt,r,R,x,y,rot)&#123; cxt.beginPath(); for (var i = 0; i &lt; 5; i++) &#123; cxt.lineTo(Math.cos((18 + i*72 - rot)/180*Math.PI)*R+x , -Math.sin((18 + i*72 - rot)/180*Math.PI)*R+y) cxt.lineTo(Math.cos((54 + i*72 - rot)/180*Math.PI)*r+x , -Math.sin((54 + i*72 - rot)/180*Math.PI)*r+y) &#125; cxt.fillStyle = &quot;#ff0&quot;; cxt.closePath(); cxt.fill(); // cxt.stroke();&#125;context.fillStyle = &quot;#f00&quot;;context.fillRect(100,100,600,400);drawStar(context,24,60,200,200,0);drawStar(context,8,20,300,140,36);drawStar(context,8,20,340,180,16);drawStar(context,8,20,340,240,0);drawStar(context,8,20,300,280,36); 一个五星红旗就绘制完成了。","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://mogutudou.com/tags/JavaScript/"},{"name":"HTML","slug":"HTML","permalink":"http://mogutudou.com/tags/HTML/"}]},{"title":"下浩老街游记","date":"2016-10-23T15:18:36.000Z","path":"2016/10/23/e4-b8-8b-e6-b5-a9-e8-80-81-e8-a1-97-e6-b8-b8-e8-ae-b0/","text":"好久没更新博客了，自从国庆从深圳回来了之后就没管过它了，今天去老街走了走，顺道发个游后感吧！ 今天下午抽空和博文去了下浩老街，老街静谧地躺在长江江畔，那里曾是重庆大轰炸后遗留下来破旧重庆古城。现在附近的上新街已通了轻轨，蓬勃的城市发展带动了那一带的拆迁改造，现代又壮观的东水门大桥联通了长江两岸，附近车水马龙好不热闹，这和老街的安静和闲适形成了鲜明的对比，繁华都市里的一抹闲情更增添了我们游玩的兴致。 走在老街古朴的青石板路上，两边古朴的民宅极其富有年代感，其中好多是危房，而且早已没人居住，剩下的居民们大多是中老年人，他们有的端几根板凳团坐在一起聊天，本地亲切的称为“摆龙门阵”；有的一起相约一桌麻将；有的借着古城的名气开起了小卖部，给来往的游客送来解渴的清泉；更富有商业头脑的居民在那儿开起了极富古香特色的茶馆，吸引着一批又一批游玩的文艺青年驻足休憩。 老街由几条巷子相互连接串通而成，还有几条富有重庆特色的石阶路，一上一下增添了古城的立体感，也许老重庆的底蕴便是在这样的老街中还有所传承。我们慢悠悠的沿着一条小巷前行，由于没有路标，有的小巷直接把我们引入了居民的家里，还好老街的人们都很亲切和热情，避免了我们误闯民宅的尴尬。小巷总是那么清凉和湿润，路边石阶上、墙上还有屋顶砖瓦上的青苔是大自然最精美的礼物，慢慢地我们的心也沉浸了下来，这样的地方，这样的人们，这样的慢生活无疑是养老的上佳选择。 老街里随处可见各种各样的猫咪，有的舒适的躺在路边的桌子上睡着，享受着倾泻的阳光；有的机敏的穿梭在秘密的角落处，仿佛随时都能逮住一只老鼠饱餐一顿；有的甚至在树上行走的，平衡性显得特别的好。我们走累了，来到了这个古色古香的茶馆里，点上一壶上好的茉莉花茶，花的清香沁润着我们的心脾，趁着休息的闲情欢声笑语的聊天，不知不觉，时间过的特别的快。 转眼间天色已暗，泛黄的路灯下老街又是另一番景象，神秘又美丽，令人向往。我们在黑夜的老街里还差点迷了路，最后终于看到记忆中曾经路过的卖菜的小摊，走出了这令人难忘的下浩老街。 繁华的都市永远那么浮躁和匆忙，我们更需要这样的老街沉淀来沉淀我们的内心。","tags":[{"name":"生活","slug":"生活","permalink":"http://mogutudou.com/tags/生活/"},{"name":"杂谈","slug":"杂谈","permalink":"http://mogutudou.com/tags/杂谈/"},{"name":"旅游","slug":"旅游","permalink":"http://mogutudou.com/tags/旅游/"}]},{"title":"CSS－Guide","date":"2016-09-27T14:54:16.000Z","path":"2016/09/27/css-ef-bc-8dguide/","text":"介绍CSS不是一种聪明的语言，虽然它学习起来很简单也很容易上手，但很快在某些合理的规模下变的问题百出。我们不能改变CSS的工作原理，但我们能改变对页面的创作和架构方式。 在一个长期运行的大型项目中，随着几十个开发人员专业领域和能力的不同，在工作中确立一些统一的标准是非常重要的。比如以下方面： 保持样式表易于维护； 持代码透明、健全、可读性高； 保持样式表的可扩展性； 我们有很多种技术方法来实现上述目标，而这篇CSS高级指南是非常值得推荐的帮助文档。 styleguide的重要性样式的代码指南（非视觉设计指南）对以下团队的人群是一个很有价值的工具： 在一段合理时间内建立和维护产品； 团队由不同能力，不同专长领域的开发者组成； 有许多能在任何一段给定时间内专注致力于开发产品的不同开发者； 定期带领指导新员工； 有许多开发者不断完善和取用的代码库。 虽然styleguide通常更适合于持续时间较长，规模较大的项目团队，该团队通常有着许多开发者长时间贡献的代码库，但是所有的开发者都应该争取提高代码的标准化程度。 当我们遵循一个好的styleguide的时候将会 根据代码库设置代码质量的标准； 促进整个代码库的一致性； 开发者对代码库有一种熟悉的感觉； 提升效率 在一个统一的项目中，styleguide应该被学习并深入理解然后随时参照执行，任何偏差的存在都必须要有充分的理由。 免责声明CSS Guidelines只是一种styleguide。对于我，我会坚定不移的将它所包含的方法、技术和技巧推荐给我的客户和团队，但是你的情况和偏好可能会有所不同，参照使用时还需结合你的实际情况。 语法和格式一个最简单的styleguide形式就是一组有关语法和格式的规则，一直用一个标准的方式来写CSS代码会让团队里的所有成员有一种熟悉的感觉。 此外，代码看上去干净整洁是一个好的多的工作环境，它还能促使团队内其他成员也保持同样的代码标准。丑陋的代码会从一开始就设立一个不好的先例。 我们希望一个高水平的styleguide是这样的： 缩进两个空格，不是制表符； 一行代码宽度最多80个字符； 多行书写CSS； 有意义的使用空白； 但是，正如所有的事情一样，某些地方是无关紧要的，但是统一性是关键。 多个文件随着预处理器的迅速崛起，开发者们经常拆分多个CSS文件。 即使不使用预处理器，将代码分割成不同用途的代码块，在构建项目的时候也是一个好的想法。 如果出于某种原因，你没有在多个文件下进行工作，下面这一小节你可能需要走一些弯路来适应你的设置。 目录做一个目录是一个相当实质性的维护开销,但它带来的好处远远大于成本。它需要勤奋的开发人员保持更新目录,但它是值得坚持的。在CSS项目中，一个最新的目录为团队提供了一个简单规范的概览指引,包括该项目的目的和开发顺序。 一个简单实用的目录将会按照一定顺序自然的介绍每个板块的名字和简要的总结包括它的目标和作用。例如： /** * CONTENTS * * SETTINGS * Global...............Globally-available variables and config. * * TOOLS * Mixins...............Useful mixins. * * GENERIC * Normalize.css........A level playing field. * Box-sizing...........Better default `box-sizing`. * * BASE * Headings.............H1–H6 styles. * * OBJECTS * Wrappers.............Wrapping and constraining elements. * * COMPONENTS * Page-head............The main page header. * Page-foot............The main page footer. * Buttons..............Button elements. * * TRUMPS * Text.................Text helpers. */ 列表中的每一项都映射到项目中某一个部分。 当然，在大多数项目中这部分将变的大得多，但我希望我们可以看到这一节在主样式表中，为开发人员提供一个项目范围视图。我们可以清晰的看到被渲染的样式代码目的是什么，在什么位置等等。 宽度为80个字符在可能的情况下，将CSS文件的宽度限制到80个字符，原因包括： 能够使得打开多个文件并排放置，方便浏览； 像GitHub网站或者终端一样查看CSS； 为注释提供一个舒适的长度；12345/** * I am a long-form comment. I describe, in detail, the CSS that follows. I am * such a long comment that I easily break the 80 character limit, so I am * broken across several lines.*/ 这里将会有不可避免的例外规则，比如URL或者梯度语法，这些都不用担心。 标题CSS中每一个主要的部分都开始于一个标题12345/*------------------------------------*\\SECTION-TITLE\\*------------------------------------*/.selector &#123; &#125; 每一部分都标题都是以“＃”为前缀，以使我们能够进行更有针对性的搜索（如grep等等），而不是只搜索标题名(SECTION-TITLE)，那样可能会产生许多搜索结果。在大范围中搜索带“＃”号的标题(#SECTION-TITLE)，应该只返回一个所需标题的结果。 在标题和下一行代码之间敲一个回车（中间可以写一写注释或者SASS或者CSS）。 如果你正在的项目里,每一个部分都有自己的文件,那么标题就应该出现在每一个部分的顶部。如果你正在做的项目每个文件包含多个部分,那么每个标题后面最好敲5个回车，这样标题再加上后面多出来的空白区域将会使新的部分在一个大的文件中滚动的时候更容易被发现。123456789101112131415/*------------------------------------*\\A-SECTION\\*------------------------------------*/.selector &#123; &#125;/*------------------------------------*\\ANOTHER-SECTION\\*------------------------------------*//*** Comment*/.another-selector &#123; &#125; rulesets的剖析在我们讨论我们如何书写我们的rulesets之前，让我们先熟悉一下相关术语：1234 [selector] &#123; [property]: [value]; [&lt;--declaration---&gt;]&#125; 比如：123456.foo, .foo--bar,.baz &#123; display: block; background-color: green; color: red; &#125; 在这里，你可以看到： 相关的选择器写在同一行，不相关的选择器另起一行书写； 在起始大括号（{）之前有一个空格； 属性名和属性值放在同一行； 在属性名的冒号（:）后，留有一个空格，再接着写属性值； 每一个声明都开始于新的一行； 和起始大括号（{）同一行的是最后一个选择器； 第一个声明在起始大括号（{）后新的一行； 结束大括号（}）独占新的一行； 每个声明都缩进两个空格； 每个声明都以一个分号（;）结束； 这种格式似乎是目前通用的标准（除了在空格数量上的变化，许多开发者还是喜欢两个空格）。 像下面代码这样的书写就是不正确的：12345.foo, .foo--bar, .baz &#123; display:block; background-color:green; color:red &#125; 问题点包括： 用制表符代替空格； 不相关的选择器写在了同一行； 起始大括号（{）独占一行； 结束大括号（}）没有独占一行； 最后的结束的（;）丢失（当然，分号是可选的，为了保持一个好习惯，最好还是写上）； 在冒号（:）后面没有空格； 多行CSSCSS应该多行书写，除了在某些非常特殊的情况下，这样写有许多好处： 降低代码合并引发冲突的几率，因为每一条样式声明都存在于它独自的一行。 更“真实”，差异更可靠，因为一行只有一个变化。 这一规则的特殊情况应该很明显，比如类似的rulesets，只带一个声明： 1234567891011.icon &#123; display: inline-block; width: 16px; height: 16px; background-image: url(/img/sprite.svg); &#125; .icon--home &#123; background-position: 0 0 ; &#125; .icon--person &#123; background-position: -16px 0 ; &#125; .icon--files &#123; background-position: 0 -16px; &#125; .icon--settings &#123; background-position: -16px -16px; &#125; 这些类型的规则受益于单行是因为： 他们仍然符合one-reason-to-change-per-line规则; 它们分享了足够多的相似之处，而这些在其他rulesets下不需要被彻底解读，这样书写使得我们浏览选择器更加直观方便。 缩进除了缩进单独声明外，整个rulesets中的缩进都和它们相互之间的关系相关联，例如：12345.foo &#123; &#125; .foo__bar &#123; &#125; .foo__baz &#123; &#125; 通过这样做，开发者可以一眼就看到它们的结构关系是.foo__baz {}在.foo__bar {}内部，且它们都在.foo {}内部。 这样对DOM节点的准复制能让开发人员不用查看HTML片段就知道这些类是在怎样的结构中被使用的。 缩进SASSSass提供嵌套功能。也就是说,通过编写下面这样的代码:12345678.foo &#123; color: red; .bar &#123; color: blue; &#125; &#125; 编译成CSS就是这样：12.foo &#123; color: red; &#125; .foo .bar &#123; color: blue; &#125; 在缩进sass的时候，我们坚持同样的两个空格，在嵌套规则的前后我们还留下一个空行。 注意：在sass缩进的时候尽量避免嵌套，更多细节请看特异性那一章。 对齐尝试对齐相关声明中相同的字符串，例如：1234567891011121314151617.foo &#123; -webkit-border-radius: 3px; -moz-border-radius: 3px; border-radius: 3px; &#125; .bar &#123; position: absolute; top: 0; right: 0; bottom: 0; left: 0; margin-right: -10px; margin-left: -10px; padding-right: 10px; padding-left: 10px; &#125; 这使生活变得更容易一些，对开发人员来说，如果他们的代码编辑器支持多列编辑，这样就可以一次性编辑多列对齐的相同内容。 有意义的空白除了缩进，我们可以通过自由和明智地使用rulesets之间的空白提供大量的信息。我们使用： 密切相关的rulesets之间留一个空行。 关联性不大的rulesets之间使用两个空行。 全新的部分板块之间留5个空行。 例如：12345678910111213141516171819/*------------------------------------*\\#FOO\\*------------------------------------*/.foo &#123; &#125; .foo__bar &#123; &#125;.foo--baz &#123; &#125;/*------------------------------------*\\#BAR\\*------------------------------------*/.bar &#123; &#125; .bar__baz &#123; &#125; .bar__foo &#123; &#125; 不应该出现两个rulesets之间没有空行的情况，比如下面这样就是错误的：123.foo &#123; &#125; .foo__bar &#123; &#125;.foo--baz &#123; &#125; HTML由于HTML和CSS本质上的相互关联性，这里我将疏忽一些我不介绍的语法和格式标记指南。 永远记着给属性打上引号，尽管没有引号也能正常工作。这将减少发生意外的可能性，而且这是大部分开发者更熟悉的格式。下面这行代码是有效的：1&lt;div class = box&gt; 但更受欢迎的格式应该是这样的：1&lt;div class = &quot;box&quot;&gt; 这里的引号不是必须的，但从安全的角度考虑，我们应该将类名“box”用引号包起来。 当同时有多个类的值时，用两个空格将它们分隔开，像这样：1&lt;div class=&quot;foo bar&quot;&gt; 当有多个类的值是相关联的时候，用中括号把它们分别括起来，像这样：1&lt;div class=&quot;[ box box--highlight ] [ bio bio--long ]&quot;&gt; 这不是一个坚定的推荐，我自己现在还在试验这样的写法，但它确实给我带来了许多好处，更多细节请看分组相关类的标记。 正如我们的rulesets一样，您可以在HTML中使用有意义的空白。您可以用5个空行来隔断主题和内容部分，例如：1234567891011&lt;header class=&quot;page-head&quot;&gt; ...&lt;/header&gt; &lt;main class=&quot;page-content&quot;&gt; ... &lt;/main&gt; &lt;footer class=&quot;page-foot&quot;&gt; ... &lt;/footer&gt; 用一个空行分隔标记相互独立且关联度不高的相关片段，例如：123456789101112131415161718192021&lt;ul class=&quot;primary-nav&quot;&gt; &lt;li class=&quot;primary-nav__item&quot;&gt; &lt;a href=&quot;/&quot; class=&quot;primary-nav__link&quot;&gt;Home&lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;primary-nav__item primary-nav__trigger&quot;&gt; &lt;a href=&quot;/about&quot; class=&quot;primary-nav__link&quot;&gt;About&lt;/a&gt; &lt;ul class=&quot;primary-nav__sub-nav&quot;&gt; &lt;li&gt;&lt;a href=&quot;/about/products&quot;&gt;Products&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;/about/company&quot;&gt;Company&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li class=&quot;primary-nav__item&quot;&gt; &lt;a href=&quot;/contact&quot; class=&quot;primary-nav__link&quot;&gt;Contact&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; 这使得开发人员能够对DOM的不同部分一目了然，也让像Vim这样的文本编辑器使用起来更加方便，例如，操纵用空行分隔标记的代码块。 更多阅读 分组相关类的标记注释 写好CSS的认知开销是巨大的，有太多需要注意的地方，还有许多实际项目中的细微差别需要记住，最糟糕的情况是随着代码量的加大，结构混乱，许多开发者都忘记了自己有没有写过这样的代码。记住让自己定义的类、规则、对象、辅助工具是在自己可控制的程度，但是任何人都很少有机会继承你的CSS。 CSS需要更多的注释 由于CSS是一种声明语言，并没有离开页面太多的东西，所以单独只看CSS文件的时候通常很难辨认以下内容： 一些CSS是否依赖于其他地方的某些代码； 修改一段CSS代码，页面中的其它地方会受到什么样的影响； 还有什么地方可能会使用到一些CSS； 某个标签可能会继承到什么样的样式（有意或者无意的）； 什么标签的样式可能会传递； 作者的意图是想把这段CSS代码用到什么地方。 这甚至还没考虑一些CSS其它的怪癖，比如各种声明overflow的状态触发了BFC（block formatting context），或者某些动画属性值的改变触发了硬件加速。这些都让开发者在继承项目的时候困惑不已。 由于CSS不能很好地讲述自己的故事,所以它确实是一个受益于大量注释的语言。 作为一项规则，如果你只看代码，不那么显而易见的看出它的意义的话就应该马上为那段代码加上一些注释。那就是说，没必要写注释告诉别人color: red;会让某个东西变成红色（因为太显而易见了），但如果你正在用overflow: hidden;来清除浮动溢出，这就是值得添加一些注释的地方了。 高层次对于文档中整个板块或者部分的一大段注释，我们用文档块式的多行注释，这比较适合宽度为80个字符的规则。 下面是一个真实的例子，是在CSS Wizardry中用CSS注释页眉。1234567891011/** * The site’s main page-head can have two different states: * * 1) Regular page-head with no backgrounds or extra treatments; it just * contains the logo and nav. * 2) A masthead that has a fluid-height (becoming fixed after a certain point) * which has a large background image, and some supporting text. * * The regular page-head is incredibly simple, but the masthead version has some * slightly intermingled dependency with the wrapper that lives inside it. */ 这种层次的注释详细程度应该是所有正式代码的基准，包括状态的描述、排列规范、满足条件、深入探讨等。 对象拓展指针当跨多个片段工作或以面向对象的方式编写CSS时，几个可以彼此关联一起工作的rulesets并不总是在同一个文件或同一个位置,例如：你可能有一个通用按钮对象，它只提供了按钮的结构样式，这个按钮将被用在一个组件的拓展部分，用来添加装饰。我们用简单的对象扩展指针来记录这种跨文件的关系。在对象文件里：12345/** * Extend `.btn &#123;&#125;` in _components.buttons.scss. */.btn &#123; &#125; 在你的主题文件里：1234567/** * These rules extend `.btn &#123;&#125;` in _objects.buttons.scss. */.btn--positive &#123; &#125;.btn--negative &#123; &#125; 这个简单、低成本的注释可以做出很大的贡献，它让还没意识到项目之间的关系的开发者们知道其它某些样式可能是怎样以及从哪里继承而来的。 低层次通常情况下，我们想在一个ruleset里的某一条具体的声明同一行后面加上注释，为此我们使用一种逆向脚注用来补充说明。这里是一个更复杂的注释，详细说明上述网站的头部部分：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152/** * Large site headers act more like mastheads. They have a faux-fluid-height * which is controlled by the wrapping element inside it. * * 1. Mastheads will typically have dark backgrounds, so we need to make sure * the contrast is okay. This value is subject to change as the background * image changes. * 2. We need to delegate a lot of the masthead’s layout to its wrapper element * rather than the masthead itself: it is to this wrapper that most things * are positioned. * 3. The wrapper needs positioning context for us to lay our nav and masthead * text in. * 4. Faux-fluid-height technique: simply create the illusion of fluid height by * creating space via a percentage padding, and then position everything over * the top of that. This percentage gives us a 16:9 ratio. * 5. When the viewport is at 758px wide, our 16:9 ratio means that the masthead * is currently rendered at 480px high. Let’s… * 6. …seamlessly snip off the fluid feature at this height, and… * 7. …fix the height at 480px. This means that we should see no jumps in height * as the masthead moves from fluid to fixed. This actual value takes into * account the padding and the top border on the header itself. */.page-head--masthead &#123; margin-bottom: 0; background: url(/img/css/masthead.jpg) center center #2e2620; @include vendor(background-size, cover); color: $color-masthead; /* [1] */ border-top-color: $color-masthead; border-bottom-width: 0; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1) inset; @include media-query(lap-and-up) &#123;background-image: url(/img/css/masthead-medium.jpg); &#125; @include media-query(desk) &#123; background-image: url(/img/css/masthead-large.jpg); &#125; &gt; .wrapper &#123; /* [2] */ position: relative; /* [3] */ padding-top: 56.25%; /* [4] */ @media screen and (min-width: 758px) &#123; /* [5] */ padding-top: 0; /* [6] */ height: $header-max-height - double($spacing-unit) - $header-border-width; /* [7] */ &#125; &#125;&#125; 这些类型的注释能够把所有的注释文档放在一个地方，同时指向它们的指针放在ruleset里的对应具体位置。 预处理注释对于绝大多数与处理器来说，我们写的注释不会编译生成到最后的CSS文件当中，通常，使用这些注释文档的代码也不会被写入CSS文件，如果您正在编写将要编译的代码，那么请使用将要编译的注释。例如下面就是正确的写法：1234567891011121314// Dimensions of the @2x image sprite: $sprite-width: 920px; $sprite-height: 212px; /** * 1\\. Default icon size is 16px. * 2\\. Squash down the retina sprite to display at the correct size. */ .sprite &#123; width: 16px; /* [1] */ height: 16px; /* [1] */ background-image: url(/img/sprites/main.png); background-size: ($sprite-width / 2 ) ($sprite-height / 2); /* [2] */ &#125; 当我们调试编译的样式表的时候，我们只能看到正确有用且相关联的信息，其它比如注释就无法看到了。 删除注释不用说都知道，在生产部署环境中是应该没有注释的，所有的CSS文件都会被压缩，体积会变小，注释相应也会丢失。 命名约定命名约定在CSS中非常有用，它能使你的代码更严格、更透明、信息更丰富。 一个好的命名约定将会告诉你和你的团队以下信息： 这个类是用来做什么样的事情； 哪里会用到这个类； 这个类可能会与其它什么东西有关联。 我遵循的命名约定很简单：用连字符(-)分隔字符串，用BEM命名法来应对更复杂的情况。 值得注意的是，命名约定并不只是在CSS发展中很有用处，它真正展现威力的是在HTML的标记中，它能让我们浏览HTML文档时对结构和内容一目了然。 连字符分隔所有类名的字符串都是用连字符来分隔的，例如：123.page-head &#123; &#125;.sub-content &#123; &#125; 用驼峰命名法或者下划线的方式分隔字符串并不经常用在CSS的类名上，例如下面就是不正确的写法：123.pageHead &#123; &#125;.sub_content &#123; &#125; 像BEM一样命名对于更多更大的UI片段，我们需要定义许多相关联的类，这时我们就可以用BEM命名法。 BEM的意思就是块（block）、元素（element）、修饰符（modifier）,是由Yandex团队提出的一种前端命名方法论。这种巧妙的命名方法让你的CSS类对其他开发者来说更加透明而且更有意义。BEM命名约定更加严格，而且包含更多的信息，它们用于一个团队开发一个耗时的大项目。 重要的是要注意，我使用的基于BEM的命名方式是经过Nicolas Gallagher修改过的。这篇文章中介绍的这种命名技术并不是原始的BEM，但却是一个我更喜欢的改进版。无论实际使用了什么样的符号，它们其实都是基于同样的BEM原则。 我们做一个比喻（注意，不是实例）123.person &#123; &#125;.person__head &#123; &#125;.person--tall &#123; &#125; .person{}是一个块（Block），代表了单独的组件根源。 .person__head{}是一个元素（Element），代表.block的后代，用于形成一个完整的.block的整体。中间用两个下划线连接。 .person--tall{}是一个修饰语，代表.block的不同状态或不同版本。中间用两个连字符连接。 开始正文块（Block）开始于一个最有逻辑的、自己独立的且与其它不相关的位置，继续我们之前对人对那个比喻，我们没有一个.room__person{}这样的类，原因就是房间是另一个有逻辑且独立不相关的块，我们可以这样写来独立不同的块：123456789.room &#123; &#125; .room__door &#123; &#125;.room--kitchen &#123; &#125;.person &#123; &#125; .person__head &#123; &#125; 如果你确实想表示人.person{}在房间.room{}里面，这里用后代选择器更合适.room .person {}。 一个更实际的例子来表示适当范围的块可能是这样，其中每个部分的代码都表示自己的块:123456789.page &#123; &#125;.content &#123; &#125;.sub-content &#123; &#125;.footer &#123; &#125; .footer__copyright &#123; &#125; 像下面这样的写法就是不正确的：123456789.page &#123; &#125;.page__content &#123; &#125;.page__sub-content &#123; &#125;.page__footer &#123; &#125; .page__copyright &#123; &#125; 重要的是要知道BEM命名范围是从哪里开始，哪里结束的。作为一个规则，BEM适用于独立，互不相关的UI组件。 更多层级如果我们准备往人.person{}这个组件中添加一个.person__eye{}的元素，我们没有必要按照DOM的层级来书写，也就是说，正确的标记方式为.person__eye{}而不是.person__head__eye{}，定义的类不用反映出所有的DOM层级关系。 修改元素你可以添加一个元素的变体，根据它的作用可以有很多种表示方法，还是接着上面人的例子，如果你要添加一个蓝色的眼睛可以这样表示：1.person__eye--blue &#123; &#125; 在这里我们是直接修改眼睛这个元素。 然而，事情有时候会变得更复杂。请原谅我粗糙的比喻，让我们想象我们有一个很帅的脸元素。但是这个人本身并不帅，所以我们直接将不帅的人的脸修改为一张很帅的脸：1.person__face--handsome &#123; &#125; 但是如果那个人本身就很帅，基于这个事实，我们想要他脸的样式。一个很帅的人的一张普通的脸的样式就可以这样表示：1.person--handsome .person__face &#123; &#125; 这就是我们基于BEM，用后代选择器修改元素样式的少数几种情况之一 如果用SASS，我们很可能会这样写：123456789.person &#123; &#125; .person__face &#123; .person--handsome &amp;amp; &#123; &#125; &#125;.person--handsome &#123; &#125; 注意我们没有在.person--handsome {}里面嵌套一个新的.person__face {}，相反，我们利用SASS的&amp;amp;符号代表父代的.person__face，所以将.person--handsome放到了.person__face的前面，这就是说所有与.person__face相关的规则只在一个地方，不会扩散到其他文件里去。当我们在处理嵌套代码的时候，这是一个比较好的做法：把上下文中所有相关的样式代码（比如这里的.person__face）封装在一个位置。 HTML中的命名约定像我之前就暗示过，命名约定并不只是在CSS发展中很有用处，它真正展现威力的是在HTML的标记中，它能让我们浏览HTML文档时对结构和内容一目了然。 我们来看一下下面这段没有用命名约定的HTML代码：1234567&lt;div class=&quot;box profile pro-user&quot;&gt; &lt;img class=&quot;avatar image&quot; /&gt; &lt;p class=&quot;bio&quot;&gt;...&lt;/p&gt; &lt;/div&gt; 可以看到，这样根本看不出box，profile，avatar这些的关联性，你也不知道在CSS中它们是否在同一个位置，更不知道其它地方会不会也出现这几个同样的类名。 如果用BEM命名法修改成下面这样：1234567&lt;div class=&quot;box profile profile--is-pro-user&quot;&gt; &lt;img class=&quot;avatar profile__image&quot; /&gt; &lt;p class=&quot;profile__bio&quot;&gt;...&lt;/p&gt; &lt;/div&gt; 现在你可以清楚的看到哪些类和其它是否相关，如果相关又是怎样关联的，我们知道哪些类超出了这个组件范围就不能用了，哪些类在其它地方可以任意重复使用 JavaScript的钩子我们都知道，在HTML文档中，将CSS和JS操作都绑定到同一个类名上是不明智的，我们最好把JS所需要操作的类绑定到一个特殊的类名上，这样可以让我们的代码更干净整洁，更透明，更易于维护。 我以前尝试重构CSS的时候，不知不觉删除了一些JS的功能，就因为它们绑定在了同一个类上，我们可能单独删除CSS或JS中的任何一个功能。 所以通常，这些类都加了一个”js-“的前缀，例如：1&lt;input type=&quot;submit&quot; class=&quot;btn js-btn&quot; value=&quot;Follow&quot; /&gt; 这就意味着我们可以在其它地方有一个.btn {}样式的按钮元素，但是没有.js-btn的行为。 data-*属性我们通常用data- 属性来作为JS的钩子，但这是不正确的。按照标准的规范，data- 属性用于存储页面或应用程序的私有自定义数据。而不是作为连接JS的被绑定的钩子。 更近一步正如前面所提到的，这些都是非常简单的命名约定，并没有在表示3个以上的类组上做更多贡献。 我鼓励在你自己的命名约定上研究更深，看的更远以提供更多的功能，而这也是我渴望进一步研究和探讨的。 更多阅读 MindBEMding – getting your head ’round BEM syntax","tags":[{"name":"CSS","slug":"CSS","permalink":"http://mogutudou.com/tags/CSS/"}]},{"title":"求字符串中第一个没重复的字符","date":"2016-09-23T07:49:17.000Z","path":"2016/09/23/e6-b1-82-e5-ad-97-e7-ac-a6-e4-b8-b2-e4-b8-ad-e7-ac-ac-e4-b8-80-e4-b8-aa-e6-b2-a1-e9-87-8d-e5-a4-8d-e7-9a-84-e5-ad-97-e7-ac-a6/","text":"这是LeetCode中的题目：387. First Unique Character in a String给一个字符串，返回字符串中第一个没重复的字符，如果都是重复的则返回－1。比如：12345s = &quot;leetcode&quot;return 0.s = &quot;loveleetcode&quot;,return 2. 下面用JavaScript实现：1234567891011121314151617var firstUniqChar = function(s) &#123; var s1 = s.split(&quot;&quot;); var s2 = &#123;&#125;; for(var i=0; i&amp;lt;s1.length; i++)&#123; var a = s1[i]; if(!s2[a])&#123; s2[a] = 1; &#125;else&#123; s2[a]++; &#125; &#125; for(var j=0; j&amp;lt;s1.length; j++)&#123; var b = s1[j]; if(s2[b] === 1) return j; &#125; return -1; &#125;","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://mogutudou.com/tags/JavaScript/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://mogutudou.com/tags/LeetCode/"}]},{"title":"返回一个数组中最大或者最小的数","date":"2016-09-05T02:07:45.000Z","path":"2016/09/05/e8-bf-94-e5-9b-9e-e4-b8-80-e4-b8-aa-e6-95-b0-e7-bb-84-e4-b8-ad-e6-9c-80-e5-a4-a7-e6-88-96-e8-80-85-e6-9c-80-e5-b0-8f-e7-9a-84-e6-95-b0/","text":"以返回最大值为例。 方法一：遍历数组123456789function returnMax(array) &#123; var max = array[0] for (var i = 1; i &amp;lt; array.length; i++) &#123; if (max &amp;lt; array[i]) &#123; max = array[i]; &#125; &#125; return max; &#125; 方法二：使用apply方法123function returnMax2(array)&#123; return Math.max.apply(Math,array); &#125; 也可以写成1Math.max.apply(&#123;&#125;,array); 总结：两个方法都可以作为对象方法扩展存在，例如123Array.prototype.max = function() &#123; return Math.max.apply(&#123;&#125;,this); &#125;;//prototype可以像对象添加属性或方法， 调用的时候就成了:123var array = new Array(1,2,3,5,4,6,7,8,9);array.max();//9","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://mogutudou.com/tags/JavaScript/"}]},{"title":"常用HTML和CSS布局技巧","date":"2016-09-02T05:53:24.000Z","path":"2016/09/02/e5-b8-b8-e7-94-a8html-e5-92-8ccss-e5-b8-83-e5-b1-80-e6-8a-80-e5-b7-a7/","text":"常见布局是每个前端开发者都应该掌握的基本知识，现在做一个简单的总结。（注：下面各个实例中实现的是 child 元素的对齐操作，child 元素的父容器是 parent 元素） 单列布局 一、水平居中布局 1、使用 inline-block 和 text-align 实现123456.parent&#123; text-align: center;&#125;.child&#123; display: inline-block;&#125; 优点：兼容性好。 缺点：需同时设置父元素和子元素。 2、使用 margin:0 auto来实现1234.child&#123; width: 200px; margin: 0 auto;&#125; 优点：兼容性好。 缺点：需指定宽度。 3、使用 table 实现1234.child&#123; display:table; margin:0 auto;&#125; 优点：只需要对自身进行设置 缺点：IE6、7需要调整结构 4、使用绝对定位实现123456789.parent&#123; position: relative;&#125;.child&#123; width: 200px; position: absolute; left: 50%; margin-left: -100px;&#125; 5、使用 flex 实现1234.parent&#123; display:flex; justify-content:center;&#125; 缺点：兼容性不好 二、垂直居中布局（此项详情请看我的另一篇文章：http://127.0.0.1/365/2016/08/11/如何竖直居中盒子里面的内容/ 多列布局 三、左列定宽，右列自适应 1、利用 float+margin 实现1234567.left&#123; float:left; width:100px;&#125; .right&#123; margin-left:100px;&#125; 2、使用 float+overflow 实现1234567.left&#123; float:left; width:100px;&#125; .right&#123; overflow:hidden;&#125; 如果我们需要将两列设置为等高，可以用下述方法将“背景”设置为等高，其实并不是内容的等高12345678910111213.left&#123; width:100px;float:left;&#125; .right&#123; overflow:hidden;&#125; .parent&#123; overflow:hidden;&#125; .left,.right&#123; padding-bottom:9999px; margin-bottom:-9999px;&#125; 或者使用 table 实现1234567891011.parent&#123; display:table; table-layout:fixed; width:100%;&#125; .left&#123; width:100px;&#125; .right,.left&#123; display:table-cell;&#125; 或者使用 flex 实现123456789.parent&#123; display:flex;&#125; .left&#123; width:100px;&#125; .right&#123; flex:1;&#125; 利用右侧容器的flex:1，均分了剩余的宽度，也实现了同样的效果。而align-items 默认值为stretch，故二者高度相等。sdfa 作者：mrshi 原文地址：http://segmentfault.com/a/1190000003931851","tags":[{"name":"CSS","slug":"CSS","permalink":"http://mogutudou.com/tags/CSS/"}]},{"title":"Normalize.css 与 Reset.css 的不同之处","date":"2016-08-26T03:05:01.000Z","path":"2016/08/26/normalize-css-e4-b8-8e-reset-css-e7-9a-84-e4-b8-8d-e5-90-8c-e4-b9-8b-e5-a4-84/","text":"1、Normalize.css 保留了一些有用的默认样式，而不是清除并重置所有样式。例如 &lt;sup&gt; 和 &lt;sub&gt; 这两个定义上标和下标文本的标签在引用了 Normalize.css 之后仍能显示原来那样的样式（实际上已变的更强大），而在引用了 Reset.css 之后的样式看起来和正常文本几乎没什么区别。所以，Normalize.css 在视觉上并不会在标签上施加的样式起点，这可能不会让每个人都喜欢它，最好的办法就是不断在两者之间进行试验和修改，再确定哪个更适合自己。 2、Normalize.css 纠正了超出 Reset.css 范围的一些常见的 bug。它具有比 Reset.css 更广的范围，并且还提供修复了一些常见问题的 bug ，例如HTML5元素的 display 属性，在继承表单元素时元素字体属性值缺失问题，修正补偿了&lt;pre&gt; 标签内的字体大小，IE9 中 SVG 的溢出问题以及 IOS 中按钮样式的bug。 3、Normalize.css 不会弄乱你的开发工具。在使用 Reset.css 时一个常见的苦恼就是在浏览器 CSS 调试工具中大量的继承显示，而这在 Normalize.css 中为了达到目标样式并不是一个问题。 4、Normalize.css 更加模块化。该项目被分解成很多相对独立的部分，您可以轻松删除可能的部分（如表单的样式标准化），如果你知道他们永远不会在你的网站中用到。 5、Normalize.css有更好的参考文档资料。Normalize.css 代码在线托管在 GitHub 上，有更全面的记录。这意味着你可以找出每行代码是干什么的，为什么它会被列入，不同浏览器显示之间的差别是什么。你可以更容易地运行自己的测试。该项目的目标就是为了帮助教育人们对浏览器如何渲染默认的元素，并让他们参与改进的提交变得更容易。","tags":[{"name":"CSS","slug":"CSS","permalink":"http://mogutudou.com/tags/CSS/"}]},{"title":"这就是HSLa","date":"2016-08-18T13:44:10.000Z","path":"2016/08/18/e8-bf-99-e5-b0-b1-e6-98-afhsla/","text":"你以为我是在说低合金高强度钢？不，我们说的是Hue(色调)、Saturation(饱和度)、Lightness(亮度)和alpha(透明度)，它是CSS中声明颜色的一种方式，一般我们会这样写它：123 #some-element&#123; background-color: hsla(170,50%,45%,1);&#125; 它类似于RGBa方式声明颜色，前三个参数值确定颜色，第四个参数值确定透明度，你可以在后面阅读更多关于浏览器支持的信息，但基本上是任何支持 rgba 的浏览器同样也支持 hsla。 Hue（色调）－ 联想一个色相环，0°或者360°是红色，120°是绿色，240°是蓝色。你可以使用0-360之间的任何值，如果使用大于360或者小于0的值会默认为360。 Saturation（饱和度）－ 0％是彻底失真（灰度），100%是完全饱和（全彩）。 Lightness（亮度）－ 0％是彻底暗（黑），100％是彻底亮（白），50％是平均亮度。 alpha（透明度）－ 0是完全透明，1是完全不透明，0.5是半透明。让我们再深入了解。 为什么它那么酷HSLa的真正魅力在于它更直观意义的显示出改变其中的参数的值会改变的颜色。增加第二个参数值将增加这种颜色的饱和度。减少第三个参数值将减少这种颜色的亮度。通过这种方式使得我们能更容易的创建自己的颜色变化动态。我敢打赌,我们大多数人无法通过RGBa模式创建好一致的颜色变化。 HSLa模型也使改变颜色值的编程更加容易。 为什么它被使用的那么少呢？HSLa被很少使用是我的一个重大假设，但据我所知，在实际编程中 HSLa 远不如 RGBa 使用的多，我认为的原因是因为HSL的值很难得到除非通过屏幕取样或者 photoshop 文件。如果你对此有疑惑或者有其他任何想法，请在评论中分享。 浏览器支持情况电脑支持情况如下： 移动端支持如下： 对于不支持的浏览器，你可以声明一个后备颜色，IE 8也不支持RGBa，所以使用十六进制代码是最好的办法。1234 #some-element&#123; background-color: #e2ecf0; /* Fallback */ background-color: hsla(170,50%,45%,1);&#125;","tags":[{"name":"CSS","slug":"CSS","permalink":"http://mogutudou.com/tags/CSS/"}]},{"title":"面试回顾","date":"2016-08-17T08:15:27.000Z","path":"2016/08/17/e9-9d-a2-e8-af-95-e5-9b-9e-e9-a1-be/","text":"今天去面试了一个创业公司（深圳我连网），因为是创业公司，对于前端开发岗位主要还是想招一个经验丰富，技术过硬的前端开发工程师。约的时间是下午三点，我怕迟到便两点的时候就已经到公司楼下了，周围转了转，都是些办公写字楼，还有在建的几栋写字楼，公交方便，地铁出来要走相对较长的路，整体环境还是不错的。 大概两点半的时候我上楼到了公司门口，整体情况依旧干净整洁大方，前台一个接待的美女态度也很好，里面虽然布局有点紧凑，不过也不影响，我还是比较满意的。 面试是在边上一个会议室，没有笔试，直接一个技术主管或者更高职位的大哥，看起来就像技术大神的人来面我，一来也是边看我简历边让我自我介绍，然后第一个问题就问我关于前端框架的东西，对于这方面我没用过，也只有实话实说，如果我说react、angular怎样怎样，也都是些皮毛的东西，稍微再深一点就没法继续了。也许第一下把我懵住了，后来的问题显的有点紧张和底气不足，不过也算是把自己该说的都说了。后来还问了ajax的原理及跨域问题、html5的一些新特性、css动画animation和transition、bootstrap的缩放问题，还有一些我回答不上的问题记不清了，基本都是些比较新的前端知识。 整个面试中规中矩，问题基本答对一半吧（自己经验不够丰富，面试官好像不是很满意）我会的基本都答出来了，不会的也没办法，毕竟自己也不是大神，回答的过程稍显我底气不足，说是考虑后再给答复。自己的优势是学习能力突出，刻苦专研的精神是让自己也骄傲的，所有的这些东西都是我自学的，每当面对任何一个棘手的技术问题我会想尽办法去解决它，网上搜也好，看别人写的技术博客也好，问身边的大神朋友也好，解决不了我睡不着觉。对于一个毕业了还跨专业跨行业就业的人这份勇气也是自己都不敢相信的。我连网公司都是一些年轻有为的有志青年组成的团队，环境氛围很好，大神也不少，在里面肯定能学到不少东西，自己还是比较希望加入的。 尽人事，听天命吧。不管能不能过，依旧学习的路上我不会停止。","tags":[{"name":"生活","slug":"生活","permalink":"http://mogutudou.com/tags/生活/"}]},{"title":"Leet Code题目——Roman to Integer","date":"2016-08-15T02:40:18.000Z","path":"2016/08/15/leet-code-e9-a2-98-e7-9b-ae-roman-to-integer/","text":"罗马数字转换成阿拉伯数字。 罗马数字共有七个，即I(1)，V(5)，X(10)，L(50)，C(100)，D(500)，M(1000)。按照下面的规则可以表示任意正整数。 重复数次：一个罗马数字重复几次，就表示这个数的几倍。 右加左减：在一个较大的罗马数字的右边记上一个较小的罗马数字，表示大数字加小数字。在一个较大的数字的左边记上一个较小的罗马数字，表示大数字减小数字。但是，左减不能跨越等级。比如，99不可以用IC表示，用XCIX表示。 加线乘千：在一个罗马数字的上方加上一条横线或者在右下方写M，表示将这个数字乘以1000，即是原数的1000倍。同理，如果上方有两条横线，即是原数的1000000倍。 单位限制：同样单位只能出现3次，如40不能表示为XXXX，而要表示为XL。 我们也可以每次跟前面的数字比较，如果小于等于前面的数字，我们先加上当前的数字，如果大于的前面的数字，我们加上当前的数字减去二倍前面的数字，这样可以把在上一个循环多加数减掉，参见代码如下:123456789101112131415161718192021222324252627282930313233 var romanToInt = function(s) &#123; var roman = function(c)&#123; switch(c)&#123; case &quot;I&quot;: return 1; case &quot;V&quot;: return 5; case &quot;X&quot;: return 10; case &quot;L&quot;: return 50; case &quot;C&quot;: return 100; case &quot;D&quot;: return 500; case &quot;M&quot;: return 1000; default: return 0; &#125; &#125;; var a; a = s.split(&quot;&quot;); var b = roman(a[0]); for(var i=1; i&lt;a.length+1; i++)&#123; if(roman(a[i-1]) &gt;= roman(a[i]))&#123; b += roman(a[i]); &#125;else&#123; b = b - 2*roman(a[i-1]) + roman(a[i]); &#125; &#125; return b;&#125;;","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://mogutudou.com/tags/JavaScript/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://mogutudou.com/tags/LeetCode/"}]},{"title":"如何在一个数组中删除指定值（不确定位置）的元素","date":"2016-08-12T16:02:44.000Z","path":"2016/08/13/e5-a6-82-e4-bd-95-e5-9c-a8-e4-b8-80-e4-b8-aa-e6-95-b0-e7-bb-84-e4-b8-ad-e5-88-a0-e9-99-a4-e6-8c-87-e5-ae-9a-e5-80-bc-ef-bc-88-e4-b8-8d-e7-a1-ae-e5-ae-9a-e4-bd-8d-e7-bd-ae-ef-bc-89-e7-9a-84-e5-85-83/","text":"今天看到一个问题，如何删除一个数组中指定值（不确定位置）的元素？比如数组[1,2,3,3,4,4,5,3,3,6,5]，我要删除其中的元素3，但是这个3的位置我是不知道的,而且这个3还可能不止一个。 下面我就用JavaScript来写个函数来实现它。 var removeElement = function(nums, val) { for(var i=0; i&amp;lt;nums.length; i++){ if(nums[i] === val){ nums.splice(i,1); i--; } } return nums; }; &nbsp;","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://mogutudou.com/tags/JavaScript/"}]},{"title":"如何竖直居中盒子里面的内容","date":"2016-08-11T10:02:47.000Z","path":"2016/08/11/e5-a6-82-e4-bd-95-e7-ab-96-e7-9b-b4-e5-b1-85-e4-b8-ad-e7-9b-92-e5-ad-90-e9-87-8c-e9-9d-a2-e7-9a-84-e5-86-85-e5-ae-b9/","text":"竖直居中一直不是没有水平居中那么容易解决，vertical-align属性总是不那么好掌握。 具体情况如下：一个固定宽高（宽500px，高300px）的div里有一段文字，目标是将那段文字放到div的竖直居中和水平居中的位置。 html代码如下：123&lt;div class=&quot;middle&quot;&gt; &lt;p&gt;我是竖直居中的文字&lt;p&gt;&lt;div&gt; 方法一：通过display:table-cell;和virtical-align:middle;完成。12345678.middle&#123; display: table-cell; vertical-align: middle; text-align: center; width: 500px; height: 300px; background: #ff0; &#125; 方法二：通过直接设置p元素的line-height属性完成。123456789.middle&#123; width: 500px; height: 300px; background: #ff0; text-align: center; &#125;.middle p&#123; line-height: 300px; &#125; 方法三：通过伪元素 :before 或者 :after 设置。12345678910111213141516171819.middle&#123; width: 500px; height: 300px; background: #ff0; text-align: center; font-size: 0; &#125;.middle:after&#123; display: inline-block; height: 100%; vertical-align: middle; content: &quot;&quot;; &#125;.middle p&#123; display: inline-block; font-size: 14px; &#125; 方法四：通过display:flex设置。12345678.middle&#123; display: flex; align-items: center; justify-content: center; width: 500px; height: 300px; background: #ff0; &#125; 方法五：通过绝对定位设置。1234567891011121314.middle&#123; position: relative; width: 500px; height: 300px; background: #ff0; &#125;.middle p&#123; position: absolute; top: 50%; left: 50%; display: inline-block; margin-left: -72px; margin-top: -8px; &#125; 最后的效果如图：","tags":[{"name":"CSS","slug":"CSS","permalink":"http://mogutudou.com/tags/CSS/"},{"name":"HTML","slug":"HTML","permalink":"http://mogutudou.com/tags/HTML/"}]},{"title":"20点提高网站访问速度缩短网页加载时间！","date":"2016-08-08T03:00:39.000Z","path":"2016/08/08/20-e7-82-b9-e6-8f-90-e9-ab-98-e7-bd-91-e7-ab-99-e8-ae-bf-e9-97-ae-e9-80-9f-e5-ba-a6-e7-bc-a9-e7-9f-ad-e7-bd-91-e9-a1-b5-e5-8a-a0-e8-bd-bd-e6-97-b6-e9-97-b4-ef-bc-81/","text":"20点提高网站访问速度缩短网页加载时间！（转自 http://www.jb51.net/yunying/245637.html ） 网友上网都不喜欢用太多的时间等待网页的打开，等待的越长，用户可能会直接关闭网页，这样就会损失很多流量！其次，关键字的排名与网页的打开速度也有关系，这个主要体现搜索引擎对用户体验度上，用户体验度好，排名相对其它网站就好些。因此我觉得我们有必要去提高网页的打开速度，这个不需要太多的成本投入，只需要平时多注意一些小技巧就行了！下面给出20种方法帮你提高网站访问速度缩短网页加载时间。 1、减少页面HTTP请求数量 比较直接的理解就是要减少调用其他页面、文件的数量。 A.我们在使用css格式控制的时候，经常会采用background载入很多图形文件，每个background的图像至少产生1次HTTP请求，一般我们为了让页面生动活泼会大量使用background来加载背景图，要改善这个状况，可以采用css的1个有用的background-position属性来加载背景图，我们将需要频繁加载的多个图片合成为1个单独的图片，需要加载时，采用以下形式加载即可将这部分图片加载的HTTP请求缩减为1个。 B.采用Image maps，这个方法也比较常用，只是限于同1个区域使用。 C.Inline images，这个方法很少见到，但对于很小很简单的图像却是很实用的，相关语法标准参照：tools.ietf.org/html/rfc2397。 2、使用CDN(Content Delivery Network)网络加速 现在国内做CDN加速业务的公司很多，简单讲，就是将你的图片、视频扩散到CDN网络所能到达之处，让用户访问时能就近下载到这些文件，从而达到网络提速的目的，这样做，同时能减轻你自己网站的负载。 3、添加文件过期或缓存头 对于同一用户频繁访问的图片、Js脚本文件等可以在Apache或Nginx设置其缓冲 时间，例如设置24小时过期时间，这样用户在访问过该页面之后再次访问时，同一组图片或JS不会再重复下载，从而减少了HTTP请求，用户访问速度明显有 所提升，同时服务器负载也会下降。下面给出nginx配置中缓存控制的例子： 4、服务器开启gzip压缩 这个大家都比较了解，即将需要传输的内容压缩后传输到客户端再解压，这样在网络上传输的 数据量会大幅减小。通常在服务器上的Apache、Nginx可以直接开启这个设置，也可以从代码角度直接设置传输文件头，增加gzip的设置，也可以从 负载均衡设备直接设置。不过需要留意的是，这个设置会略微增加服务器的负担。 5、css格式定义放置在文件头部 这项设置对于用户端是慢速网络或网页内容比较庞大的情况比较有利，可以在网页逐步呈现的同时仍会保持格式信息，不影响网页美感。 6、Javascript脚本放在文件末尾 很多Javascript脚本执行效率低下，或者有的第3方域名脚本出现意外无法载入， 如果将这些脚本放置到页面比较靠前的位置，可能会导致我们自己网站的内容载入速度下降甚至无法正常加载，所以一般将这些脚本放置在网页文件末尾，一定要放 置在前面的脚本要改用所谓的“后载入”方式加载，在主体网页加载完成后再加载，防止其影响到主体网页的加载速度。 7、避免使用CSS脚本(CSS Expressions) 有时为了要css的参数动态改变，可能会采用css expression来实现，但这样做得不偿失，会使用户端浏览器负担明显加重，所以不建议这样做，如果需要改变，可以使用Javascript脚本去实现。 8、css、javascript改由外部调用 如果css、js内容比较庞大，尽量不要写到同1个页面中去，改由外部载入比较妥当，因为浏览器本身会对css、js文件进行缓存。 9、压缩Javascript、CSS代码 一般js、css文件中存在大量的空格、换行、注释，这些利于阅读，如果能够压缩掉，将会很有利于网络传输。这方面的工具也有很多，一般可以保留开发版本，利用工具生成生产版本，2个文件比较，一般压缩率能达到50%以上，减少的数据量还是比较可观的。 我这个博客刚改版完成，各种代码还没有进行优化和压缩，目前yslow评级只能达到D,等有时间进行部分优化，达到C等级应该问题不大。 10、避免采用301、302转向 11、养成良好的开发维护习惯，尽量避免脚本重复调用 12、配置ETags 13、Ajax采用缓存调用 这个的使用可以参照Discuz论坛代码，里面对于大量使用的Ajax调用都采用了缓存 调用方式，一般采用附加特征参数方式实现，注意其中的 就是特征参数，这个参数不变化就使用缓存文件，如果发生变化则重新下载新文件或更新信 息。 14、合理使用Flush 用户端发送浏览请求后，服务器端一般要花销200-500ms去处理这些请求，在此期间，用户端浏览器处于等待状态，如果要减少用户等待时间，可以在适当的位置使用flush，将已经就绪的内容推送到用户端，这在php中很容易实现例如： 15、Ajax调用尽量采用GET方法调用 实际使用XMLHttpRequest时，如果使用POST方法实现，会发生2次HTTP请求，而使用GET方法只会发生1次HTTP请求。如果改用GET方法，HTTP请求减少50%！ 16、尽可能减少DCOM元素 这个很好理解，就是尽可能减少网页中各种&lt;&gt;元素数量，例如 的冗余很严重，而我们完全可以用取代之。 17、使用多域名负载网页内的多个文件、图片 记得有资料说明，IE在网页载入过程中，在同1时刻，对同1域名并行加的HTTP请求数 量最高为2个，如果网页需要加载的文件数量超过2个(通常远远超过..)，要加快网页访问速度，最好将文件分布到多个域名，例如19楼，其js文件采用独 立的域名，据说百度的图片服务器数量在20台以上。 18、缩减iframe的使用，如无必要，尽量不要使用 iframe通常用于不同域名内容的加载，这同时也可能因iframe内容加载速度影响到主网页加载速度，如果可能，把需要加载的内容抓取到本地直接嵌入。如果实在需要iframe加载，采用后载入方式实现。 19、优化图片文件 优化图片文件，减小其尺寸，特别是缩略图，一定要按尺寸生成缩略图然后调用，不要在网页中用resize方法实现，虽然这样看到的图片外形笑了，但是其加载的数据量一点也没减少。曾经见过有人在网页中加载的缩略图，其真实尺寸有10M之巨… 普通图像、icon也要尽可能压缩后，可以采用web图像保存、减少颜色数等等方法实现。 20、当页面内容庞大到一定程度，可以采用分页的方式展现，或者taobao的那种翻页后载入方式。","tags":[{"name":"前端","slug":"前端","permalink":"http://mogutudou.com/tags/前端/"},{"name":"性能","slug":"性能","permalink":"http://mogutudou.com/tags/性能/"}]},{"title":"用JS实现常用排序算法","date":"2016-08-01T14:59:19.000Z","path":"2016/08/01/e7-94-a8js-e5-ae-9e-e7-8e-b0-e5-b8-b8-e7-94-a8-e6-8e-92-e5-ba-8f-e7-ae-97-e6-b3-95/","text":"看到排序算法这里，发现有些面试官喜欢考这个，所以我大概总结一下，也为自己做好准备，以下内容为我个人见解，如有错误的地方还欢迎指正。以下例子均是给一个数字数组按从小到大排序 一、js原生有sort()方法123function paixu(array)&#123; return array.sort(function(a,b)&#123;return (a-b)&#125;)&#125; 二、冒泡排序12345678910111213function paixu2(array)&#123; var temp; for (var i = 0; i &lt; array.length; i++) &#123; for (var j = i+1; j &lt; array.length; j++) &#123; if(array[i] &gt; array[j])&#123; temp = array[i]; array[i] = array[j]; array[j] = temp; &#125; &#125; &#125; return array;&#125; 三、插入排序123456789101112function paixu3(array)&#123; for (var i = 0; i &lt; array.length; i++) &#123; var temp = array[i]; var j = i - 1; while (j &gt;= 0 &amp;&amp; array[j] &gt; temp) &#123; array[j + 1] = array[j]; j--; &#125; array[j + 1] = temp; &#125; return array; &#125; 四、快排1234567891011121314function kuaipai(array)&#123; if (array.length &lt;= 1) &#123;return array;&#125; var base = array.splice(0,1)[0]; var left = []; var right = []; for (var i = 0; i&lt; array.length; i++) &#123; if(array[i] &lt; base)&#123; left.push(array[i]); &#125; else&#123; right.push(array[i]); &#125; &#125; return kuaipai(left).concat([base],kuaipai(right));&#125; 关于排序，还有其它很多算法，以后再慢慢补充。","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://mogutudou.com/tags/JavaScript/"},{"name":"排序","slug":"排序","permalink":"http://mogutudou.com/tags/排序/"}]},{"title":"LeetCode题目—— Add Digits","date":"2016-08-01T02:01:27.000Z","path":"2016/08/01/leetcode-e9-a2-98-e7-9b-ae-add-digits/","text":"给一个非负整数，把每一位上的数字相加，若和不为一位数则继续把每一位上的数字相加，直到相加只和为一位数为止，最后返回那个数。英文原文如下： Given a non-negative integer num, repeatedly add all its digits until the result has only one digit. For example: Given num = 38, the process is like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it. 这题主要是要掌握字符串和数字之间的转换，以及递归方法的掌握。下面我们就用 Javascript 写一个函数实现它，如果有其它更好的方法，还请给我评论或者联系我。123456789 var addDigits = function(num) &#123; var num2 = String(num).split(&apos;&apos;); var num3 = 0; for(var i=0; i &lt; num2.length; i++)&#123; num3 += Number(num2[i]); &#125; if(num3 &lt; 10) return num3; else return addDigits(num3);&#125;;","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://mogutudou.com/tags/JavaScript/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://mogutudou.com/tags/LeetCode/"}]},{"title":"余生请多指教","date":"2016-07-24T05:00:12.000Z","path":"2016/07/24/e4-bd-99-e7-94-9f-e8-af-b7-e5-a4-9a-e6-8c-87-e6-95-99/","text":"每次失望一次，我就少做一件爱你的事，直到最后备注改成全名、取消特别关注、上线不主动找你、收起你送的东西、删掉你所有的照片、再也不偷看你的时候，就是该说再见的时候了。多年后你会不会记得，曾经有一个人很努力的珍惜过你。 失望是一天天累积的，离开是很长的决定…… 以上是听网易云音乐一首 “You” 下面的评论，我觉得写的有点意思，曾经也算是我的一段成长历程的缩写吧，就转过来了。现在明白爱不是占有，不是控制。 道理我都懂，但我并没有女朋友／再见","tags":[{"name":"生活","slug":"生活","permalink":"http://mogutudou.com/tags/生活/"},{"name":"杂谈","slug":"杂谈","permalink":"http://mogutudou.com/tags/杂谈/"}]},{"title":"LeetCode题目——Invert Binary Tree（倒置一个二叉树）","date":"2016-07-22T12:42:02.000Z","path":"2016/07/22/leetcode-e9-a2-98-e7-9b-ae-invert-binary-tree-ef-bc-88-e5-80-92-e7-bd-ae-e4-b8-80-e4-b8-aa-e4-ba-8c-e5-8f-89-e6-a0-91-ef-bc-89/","text":"这道题就是给我们一个二叉树，然后倒置它，现在我就用 Javascript 来完成它 12345678var invertTree = function(root) &#123; if(root)&#123; var abc = root.left; root.left = invertTree(root.right); root.right = invertTree(abc); &#125; return root;&#125;; 如有错误，欢迎指正。","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://mogutudou.com/tags/JavaScript/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://mogutudou.com/tags/LeetCode/"}]},{"title":"打可乐有感","date":"2016-07-20T15:46:45.000Z","path":"2016/07/20/e6-89-93-e5-8f-af-e4-b9-90-e6-9c-89-e6-84-9f/","text":"今天一大早就被一股酸爽的味道臭醒，起来一看，亮瞎了可乐的狗眼，厨房门口一堆，客厅两堆，我快要吐了。玉不琢不成器，奔着一股黄金棍下出好狗的理念，我们把可乐打得满地哀嚎，就差把它腿打断了，然后再拧去厕所关了半小时禁闭。真的是又气又恨，教它去厕所拉屎都一个多月了，期间也成功在厕所拉过一段时间，现在感觉又都忘了，真是太傻太笨了。 打完之后我发现它都快得抑郁症了，说它什么它都低着头，或者趴着，一副天下它最委屈的样子。然后今天白天一天都没给吃的给它，它也失去了往日乱翻乱跳的风采，静静地趴着睡觉，也不知道它又没有在反省。自从把可乐带回家来也有将近两个月了吧，家里的变化真是翻天覆地，以前大概一周做一次卫生，现在两三天就得大扫除，可乐翻垃圾桶的坏毛病也是屡教不改，还有我们的拖鞋，椅子，墙角，电线都没逃过它的尖牙利齿，也为此打了它不少。我们也因为狗毛的问题和扫楼道的阿姨拌过几次嘴，真的快疯了。不过也可能是因为它还小，一共也才四五个月，连一岁都没有，还得慢慢教才行。 可乐还是有算是一个优点的，那就是它不记仇，不管打它有多狠，打的有多痛，隔一会儿有吃的的时候它还是一脸渴望的表情在你面前坐着，就等着你给它好吃的，就算是血海深仇也可以通过一根小火腿肠就可以化解，让它忘记曾经的痛。它还有一个特点就是对谁都特别热情，我们喂它养它那么久，拉出去遛的时候对每一个陌生人都会热情的扑上去，尤其是女生，可它是母狗啊！真的是任何人都可以把它牵走，平时真是白对它那么好了。 生活中多了可乐，增添了一点生活的乐趣，闲的没事的时候就逗它玩，给它吃的，教它坐下，握手等基本动作，现在也都差不多学会了。天气好的时候也带出去遛遛，或者到楼顶天台晒晒太阳，鸢饱凌风飞，犬暖向日眠，说的就是这种情景吧。 狗是人类的朋友。","tags":[{"name":"生活","slug":"生活","permalink":"http://mogutudou.com/tags/生活/"},{"name":"杂谈","slug":"杂谈","permalink":"http://mogutudou.com/tags/杂谈/"}]},{"title":"用JS写一个数组去重的方法","date":"2016-07-18T09:51:11.000Z","path":"2016/07/18/e7-94-a8js-e5-86-99-e4-b8-80-e4-b8-aa-e6-95-b0-e7-bb-84-e5-8e-bb-e9-87-8d-e7-9a-84-e6-96-b9-e6-b3-95/","text":"今天看到一道面试题是说用 Javascript 写一个数组去重的方法，我也做了一下，思路大概是先排序，再用另一个数组来存不重复项。代码如下：1234567891011function removeDuplicates1(array1) &#123; var array = []; var b = 0; var array2 = array1.sort(); for (var i = 0; i &lt; array2.length; i++) &#123; if (array2[i] === array2[i+1]) continue; else array[b] = array2[i]; b++; &#125; return array; &#125; 方法二：利用数组下标和临时变量 1234567891011121314var removeDuplicates2 = function(array)&#123; var array2 = array.sort(); var temp = array2[0]; var a = 1; for (var i = 1; i &lt; array2.length; i++) &#123; if(temp === array2[i]) continue; else&#123; temp = array2[i]; array2[a] = temp; a++; &#125; &#125; return array2.slice(0,a);&#125; 如有错误，欢迎指正","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://mogutudou.com/tags/JavaScript/"}]},{"title":"背井离乡的日子","date":"2016-07-17T14:34:28.000Z","path":"2016/07/17/119/","text":"“独在异乡为异客，每逢佳节倍思亲”每一个游子在外漂泊，日子越久，这种思乡情越深吧。 “背井离乡”说起这个词总有点凄凉的含义，现在放在我身上也还不至于那么惨，可能我本身是个乐观的人，也有可能是从小鲁迅先生的阿Q精神学的不错，偶尔自嘲自讽一下还行，不能太过，这种精神并不是好精神。 很幸运的在大学期间结识了很多全国各地的同学，现在基本上走到哪里都会有朋友，这真是一笔巨大的人生财富啊！所以不要说在大学什么也没学到，大学你学的不仅是书本上的知识，自己的圈子也在扩大，学识阅历同时也在增长，还有其他各个方面自己的成长。同学和朋友最多的还是在重庆，但现在既然来到了深圳，既来之则安之吧。健康生活，持续进步，闲时约上几个好友骑骑单车，吹吹海风，再吃点烧烤喝点酒，最幸福的事也不过如此。 来深圳也有一段时间了，有不少重庆的朋友和同学都在问我什么时候回去，家里人也问了好多次，每次我都一笑而过，都说不着急，还早，这边一切都挺好。和爸妈打电话的时候言语之中也能听出一些父母的想念，听得出来他们也是很想我回去的。都说日落的地方是天涯，无数个望着落日的晚霞的日子，天涯我都看到了，为何没看到我的家。从小到大在重庆生活了二十几年，那里是我的故乡，是我的家，我是肯定会回去的。","tags":[{"name":"生活","slug":"生活","permalink":"http://mogutudou.com/tags/生活/"},{"name":"杂谈","slug":"杂谈","permalink":"http://mogutudou.com/tags/杂谈/"}]},{"title":"LeetCode题目——Same Tree（一样的树）","date":"2016-07-14T14:12:15.000Z","path":"2016/07/14/leetcode-e9-a2-98-e7-9b-ae-same-tree-ef-bc-88-e4-b8-80-e6-a0-b7-e7-9a-84-e6-a0-91-ef-bc-89/","text":"这道题的意思是判断两个二叉树是否一样，一样意味着结构和每个树杈上的值都一模一样。英文原文是这样的： Given two binary trees, write a function to check if they are equal or not. Two binary trees are considered equal if they are structurally identical and the nodes have the same value. 于是我写下了如下的 JavaScript 代码： 12345678910111213141516var isSameTree = function(p, q) &#123; if(p===null)&#123; if(q===null)return true; else return false; &#125;else&#123; if(q===null)return false; else&#123; if(p.val===q.val)&#123; var a = isSameTree(p.left,q.left); var b = isSameTree(p.right,q.right); return a&amp;&amp;b; &#125; else return false; &#125; &#125;&#125; 如有错误或者更好的建议，欢迎指正。","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://mogutudou.com/tags/JavaScript/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://mogutudou.com/tags/LeetCode/"}]},{"title":"最近有点浮躁","date":"2016-07-13T14:10:59.000Z","path":"2016/07/13/e6-9c-80-e8-bf-91-e6-9c-89-e7-82-b9-e6-b5-ae-e8-ba-81/","text":"今天有点浮躁，看不进去书，啥也不想做，白天睡不醒，晚上睡不着，疯了。 配张好看点的图，调节一下心情。","tags":[{"name":"生活","slug":"生活","permalink":"http://mogutudou.com/tags/生活/"}]},{"title":"LeetCode题目——Happy Number（快乐的数字）","date":"2016-07-12T14:58:23.000Z","path":"2016/07/12/leetcode-e9-a2-98-e7-9b-ae-happy-number-ef-bc-88-e5-bf-ab-e4-b9-90-e7-9a-84-e6-95-b0-e5-ad-97-ef-bc-89/","text":"写一个方法来判断一个正整数是不是 happy number ，happy number 的定义是这样的：把它每一位上的数字分别平方后再求和，直到求和等于 1 或者一个不包括 1 的无限循环，那些求和后等于1的数字就是快乐的数字，其他的就不是。英文原文是这样的： A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers. 比如：“19” 就是一个快乐的数字： 下面我们就用 JavaScript 来做这道题，从 1—10 我算了一下，只有 1 和 7 是 happy number 所以用递归的方式写了如下代码：12345678910111213var isHappy = function(n) &#123; if(n === 1 || n === 7) return true; if(n &amp;lt; 10) return false; var b = n.toString(); var a = b.split(&quot;&quot;); var d=0; var e=0; for(var c = 0; c &lt; b.length; c++)&#123; d = Math.pow(Number(a[c]),2); e += d; &#125; return isHappy(e);&#125;; 这个方法还不够好，肯定还有更快速的方法，希望有人来指导我一下。","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://mogutudou.com/tags/JavaScript/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://mogutudou.com/tags/LeetCode/"}]},{"title":"天热，日子好难过","date":"2016-07-11T15:56:13.000Z","path":"2016/07/11/e5-a4-a9-e7-83-ad-ef-bc-8c-e6-97-a5-e5-ad-90-e5-a5-bd-e9-9a-be-e8-bf-87/","text":"最近天气是又热又闷，一场阵雨过后感受不到一点凉意，所以宅在空调房间里还是有原因的。出门的代价太大，首先走楼梯上下七楼就得需要极大的勇气，稍微逛逛，再吃个饭买点东西就满头大汗浑身湿透了。前几天还在羡慕可乐（家里的金毛），说它整天很闲，就知道吃，吃了就睡，还有人给它铲屎，日子多么潇洒舒适，但现在想到它在这闷热的天气里还得一直得穿着那件“真皮毛绒服”，有句诗怎么说来着，好像是“飞鸟厌其羽,走兽厌其毛”，这样的日子应该也不会好过吧。 虽说天气热，但每年不都是这样的吗，想想去年的这个时候我又在哪儿又在做什么呢？去年的这个时候，我刚毕业，进了顺丰，周一至周五每天都在在上班吧。可能真的是忙起来时间就过得很快，然后就不觉得热了吧。周末的时候还想着要放松一下，约上几个同学，去看看母校美丽的风景，那样也是别有一番韵味的。 所以，热不是关键，心情才是关键。日子好不好过，天气说了不算，自己说了算。","tags":[{"name":"生活","slug":"生活","permalink":"http://mogutudou.com/tags/生活/"},{"name":"杂谈","slug":"杂谈","permalink":"http://mogutudou.com/tags/杂谈/"}]},{"title":"穷举法简析Google方程式","date":"2016-07-10T17:43:51.000Z","path":"2016/07/11/e7-a9-b7-e4-b8-be-e6-b3-95-e7-ae-80-e6-9e-90google-e6-96-b9-e7-a8-8b-e5-bc-8f/","text":"google方程式的题目是这样的：有一个字符组成的等式：WWWDOT - GOOGLE = DOTCOM，每个字符代表一个0－9之间的数字，WWWDOT、GOOGLE和DOTCOM都是合法的数字，不能以0开头。请找出一组字符和数字的对应关系，使它们互相替换，并且替换后的数字能够满足等式。将方程式改成竖式可能更直观一些： 下面我们就用 JavaScript 来找到符合条件的等式，然后用alert将等式显示在网页中。（本人比较笨，目前只写出思维易懂非递归的穷举法，有其他更好方法的读者还请联系我，抱着一颗乐于学习的心态我们一起探讨）1234567891011121314151617181920212223242526272829303132333435function google()&#123;&lt; for(var w=1;w&lt;10;w++)&#123; for(var d=1;d&lt;10;d++)&#123; if(d==w) continue; for(var o=0;o&lt;10;o++)&#123; if(o==w||o==d) continue; for(var t=0;t&lt;10;t++)&#123; if(t==w||t==d||t==o) continue; for(var g=1;g&lt;10;g++)&#123; if(g==w||g==d||g==o||g==t) continue; for(var l=0;l&lt;10;l++)&#123; if(l==w||l==d||l==o||l==t||l==g) continue; for(var e=0;e&lt;10;e++)&#123; if(e==w||e==d||e==o||e==t||e==g||e==l) continue; for(var c=0;c&lt;10;c++)&#123; if(c==w||c==d||c==o||c==t||c==g||c==l||c==e) continue; for(var m=0;m&lt;10;m++)&#123; if(m==w||m==d||m==o||m==t||m==g||m==l||m==e||m==c) continue; var wwwdot = w*100000 + w*10000 + w*1000 + d*100 + o*10 + t; var google = g*100000 + o*10000 + o*1000 + g*100 + l*10 + e; var dotcom = d*100000 + o*10000 + t*1000 + c*100 + o*10 + m; if (wwwdot - google === dotcom) &#123; alert(wwwdot + &quot;-&quot; + google + &quot;=&quot; + dotcom); &#125; &#125; &#125; &#125; &#125; &#125; &#125; &#125; &#125; &#125;&#125; window.onload = google; 最后网页显示出来有两个答案：777589 - 188103 = 589486 或 777589 - 188106 = 589483 &nbsp; 如有错误，还请联系我，欢迎指正。","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://mogutudou.com/tags/JavaScript/"}]},{"title":"LeetCode题目 —— Climbing Stairs（爬楼梯）","date":"2016-07-09T04:23:22.000Z","path":"2016/07/09/leetcode-e9-a2-98-e7-9b-ae-climbing-stairs-ef-bc-88-e7-88-ac-e6-a5-bc-e6-a2-af-ef-bc-89/","text":"这道题的大概意思是这样的：有一个 n 阶的楼梯，一次只能爬一阶或者两阶，问爬完这个楼梯有多少种不同的方法？英文原文是这样的： You are climbing a stair case. It takes n steps to reach to the top.Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top? 大概分析一下：如果 n＝1 ，那么有 1 种方法；如果 n ＝ 2 ，那么有 2 种方法；如果 n ＝ 3 ，那么有 3 种方法；如果 n ＝ 4 ，那么有 5 种方法…… n 阶楼梯，假设第一次爬 1 阶，剩下 n－1 阶有 f(n-1) 种方法；假设第一次爬 2 阶，剩下 n－2 阶有 f(n-2) 种方法，所以爬 n 阶的方法为后面两种的和，即 f(n) = f(n-1) + f(n-2)，是一个斐波那契数列。 下面用 Javascript 来做这道题。 方法一：递归 在这道题中，递归方法的时间复杂度太大了，当 n &gt; 43 时就会超时，所以提交不会通过。123456789 var climbStairs = function(n) &#123; if(n === 1) return 1; if(n === 2) return 2; var a = 0; if(n &gt; 2)&#123; a = climbStairs(n-1) + climbStairs(n-2); &#125; return a;&#125;; 方法二：非递归123456789101112 var climbStairs = function(n) &#123; if(n === 1) return 1; if(n === 2) return 2; var a = 1; var b = 2; var c = 0; for(var i = 0; i &amp;lt; (n-2); i++)&#123; c = a + b; a = b; b = c; &#125;return c;&#125;; 方法三 当你知道斐波那契数列的通项公式为 [(1+√5)/2]^n/√5 － [(1-√5)/2]^n/√5 也可以直接返回该计算结果。斐波那契数列是1，1，2，3，5，8，13，21……而这里开始只有1个1，即1，2，3，5，8，13，21……所以通项公式里的 n 需改为 ( n+1 )12345678 var climbStairs = function(n) &#123; var a = Math.sqrt(5); var b = (1 + a)/2; var c = (1 - a)/2; var d = Math.pow(b,(n+1))/a; var e = Math.pow(c,(n+1))/a; return (d-e);&#125;; 如有错误，还请联系我，欢迎指正。","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://mogutudou.com/tags/JavaScript/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://mogutudou.com/tags/LeetCode/"}]},{"title":"晚点遇见你，余生都是你","date":"2016-07-08T04:12:21.000Z","path":"2016/07/08/e6-99-9a-e7-82-b9-e9-81-87-e8-a7-81-e4-bd-a0-ef-bc-8c-e4-bd-99-e7-94-9f-e9-83-bd-e6-98-af-e4-bd-a0/","text":"每个人都希望在对的时间遇到对的人，但现实总是把你的脸打的啪啪响。有情人终成眷属固然是好，每个人都有追求自己幸福的权利，但柔情似水，佳期如梦，什么时候你生命中对的那个人才会出现，你又怎么确定现在你身边的那个人就是对的人呢？ 最近看到一段话，说是婚姻就像是一场考试，身边的同龄人陆陆续续地都交卷了，个别朋友连重考卷都答完了，最后到自己的时候也就胡乱写两笔，潦潦草草的也交卷了。美好的事物需要等待，也值得等待。如果连那个将要与你共度余生十年、二十年、三十年、五十年的人都可以将就，那人生里已经没有任何值得期待的东西了。在我这个年纪还没有足够的资格和经验谈论婚姻如何如何，但我想说的是我们每个人都有自己的人生，不管过成什么样，都是自己的，与其沉浸于过去，抑或是现在的纷乱纠葛，不如大胆一点，理智一点，大胆斩断明知结局不好却又难舍难分的千丝万缕。 爱等情不等 心等人不等，但等，并不是傻等，需要在这个过程中各方面不断武装自己。所以，让我晚点再遇见你吧，待我破巨浪乘长风再与你共享欢乐年华。 &nbsp;","tags":[{"name":"杂谈","slug":"杂谈","permalink":"http://mogutudou.com/tags/杂谈/"}]},{"title":"世界，您好！","date":"2016-07-07T05:07:05.000Z","path":"2016/07/07/hello-world-1/","text":"我是一个很有趣的人，我喜欢打羽毛球和睡觉。 其实不需要太多的东西，只要健康的活着，真诚的爱着，也不失为一种富有。","tags":[]}]